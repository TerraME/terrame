-------------------------------------------------------------------------------------------
-- TerraME - a software platform for multiple scale spatially-explicit dynamic modeling.
-- Copyright (C) 2001-2016 INPE and TerraLAB/UFOP -- www.terrame.org

-- This code is part of the TerraME framework.
-- This framework is free software; you can redistribute it and/or
-- modify it under the terms of the GNU Lesser General Public
-- License as published by the Free Software Foundation; either
-- version 2.1 of the License, or (at your option) any later version.

-- You should have received a copy of the GNU Lesser General Public
-- License along with this library.

-- The authors reassure the license terms regarding the warranties.
-- They specifically disclaim any warranties, including, but not limited to,
-- the implied warranties of merchantability and fitness for a particular purpose.
-- The framework provided hereunder is on an "as is" basis, and the authors have no
-- obligation to provide maintenance, support, updates, enhancements, or modifications.
-- In no event shall INPE and TerraLAB / UFOP be held liable to any party for direct,
-- indirect, special, incidental, or consequential damages arising out of the use
-- of this software and its documentation.
--
-------------------------------------------------------------------------------------------

-- Based on a color table available at http://gucky.uni-muenster.de/cgi-bin/rgbtab-en
local colors = {
	black        = {  0,   0,   0},
	white        = {255, 255, 255},
	lightRed     = {255, 102, 102},
	red          = {255,   0,   0},
	darkRed      = {128,   0,   0},
	lightYellow  = {255, 255, 153},
	yellow       = {255, 255,   0},
	darkYellow   = {255, 215,   0},
	lightOrange  = {255, 180,   0},
	orange       = {238, 154,   0},
	darkOrange   = {205, 103,   0},
	lightBrown   = {128,  85,  85},
	brown        = {128,  64,  64},
	darkBrown    = {108,  53,  53},
	lightGreen   = {153, 255, 153},
	green        = {  0, 255,   0},
	darkGreen    = {  0, 128,   0},
	lightCyan    = {128, 255, 255},
	cyan         = {  0, 255, 255},
	darkCyan     = {  0, 128, 128},
	lightBlue    = {173, 216, 230},
	blue         = {  0,   0, 255},
	darkBlue     = {  0,   0, 128},
	lightGray    = {210, 210, 210},
	gray         = {160, 160, 160},
	darkGray     = {128, 128, 128},
	lightMagenta = {255, 128, 255},
	magenta      = {255,   0, 255},
	darkMagenta  = {139,   0, 139},
	lightPurple  = {155,  48, 255},
	purple       = {125,  38, 205},
	darkPurple   = { 85,  26, 139}
}

-- approximate equivalent names in ISCC-NBS system
-- see http://en.wikipedia.org/wiki/ISCC-NBS_system
local brewerMatchNames = {
	BuGn = "BuGn",
	BlueishGreens = "BuGn",
	BlueGreens = "BuGn",
	BlueGreen = "BuGn",
	BuPu = "BuPu",
	BlueishPurples = "BuPu",
	BluePurples = "BuPu",
	BluePurple = "BuPu",
	GnBu = "GnBu",
	GreenishBlues = "GnBu",
	GreenBlues = "GnBu",
	GreenBlue = "GnBu",
	OrRd = "OrRd",
	OrangishReds = "OrRd",
	OrangeReds = "OrRd",
	OrangeRed = "OrRd",
	PuBu = "PuBu",
	PurplishBlues = "PuBu",
	PurpleBlues = "PuBu",
	PurpleBlue = "PuBu",
	PuBuGn = "PuBuGn",
	PurplishBlueGreens = "PuBuGn",
	PurpleBlueGreens = "PuBuGn",
	PurpleBlueGreen = "PuBuGn",
	PuRd = "PuRd",
	PurplishReds = "PuRd",
	PurpleReds = "PuRd",
	PurpleRed = "PuRd",
	RdPu = "RdPu",
	ReddishPurples = "RdPu",
	RedPurples = "RdPu",
	RedPurple = "RdPu",
	YlGn = "YlGn",
	YellowishGreens = "YlGn",
	YellowGreens = "YlGn",
	YellowGreen = "YlGn",
	YlGnBu = "YlGnBu",
	YellowishGreenBlues = "YlGnBu",
	YellowGreenBlues = "YlGnBu",
	YellowGreenBlue = "YlGnBu",
	YlOrBr = "YlOrBr",
	YellowishOrangeBrowns = "YlOrBr",
	YellowOrangeBrowns = "YlOrBr",
	YellowOrangeBrown = "YlOrBr",
	YlOrRd = "YlOrRd",
	YellowishOrangereds = "YlOrRd",
	YellowOrangeReds = "YlOrRd",
	YellowOrangeRed = "YlOrRd",
	Blues = "Blues",
	Blue = "Blues",
	Greens = "Greens",
	Green = "Greens",
	Greys = "Greys",
	Grey = "Greys",
	Grays = "Greys",
	Gray = "Greys",
	Oranges = "Oranges",
	Orange = "Oranges",
	Purples = "Purples",
	Purple = "Purples",
	Reds = "Reds",
	Red = "Reds",
	BrBG = "BrBG",
	BrownsBlueGrens = "BrBG",
	BrownsWhiteBlueGreens = "BrBG",
	BrownsWhiteBlueGreen = "BrBG",
	BrownsBlueGreens = "BrBG",
	BrownBlueGreen = "BrBG",
	PiYG = "PiYG",
	PurplesWhiteYellowGreens = "PiYG",
	PurplesYellowGreens = "PiYG",
	PurplesYellowGreen = "PiYG",
	PurplesYellowsGreens = "PiYG",
	PRGn = "PRGn",
	PurpleRedsWhiteGreens = "PRGn",
	PurplesRedsWhiteGreens = "PRGn",
	PurplesRedsGreens = "PRGn",
	PurpleRedWhiteGreen = "PRGn",
	PurpleRedGreen = "PRGn",
	PuOr = "PuOr",
	PurplesWhiteOranges = "PuOr",
	PurplesOranges = "PuOr",
	PurpleOrange = "PuOr",
	RdBu = "RdBu",
	RedsWhiteBlues = "RdBu",
	RedWhiteBlue = "RdBu",
	RedBlue = "RdBu",
	RedsBlues = "RdBu",
	RdGy = "RdGy",
	RedsWhiteGreys= "RdGy",
	RedsGreys= "RdGy",
	RedGrey = "RdGy",
	RdYlBu = "RdYlBu",
	ReddishYellowWhiteBlues = "RdYlBu",
	RedsYellowsBlues = "RdYlBu",
	RedYellowWhiteBlue = "RdYlBu",
	RedYellowBlue = "RdYlBu",
	RdYlGn = "RdYlGn",
	ReddishYellowWhiteGreens= "RdYlGn",
	RedsYellowsWhitesGreens = "RdYlGn",
	RedYellowWhiteGreen = "RdYlGn",
	RedsYellowsGreens = "RdYlGn",
	RedYellowGreen = "RdYlGn",
	Spectral = "Spectral",
	Paired = "Paired",
	Pastel1 = "Pastel1",
	Pastel2 = "Pastel2",
	Set1 = "Set1",
	Set2 = "Set2",
	Set3 = "Set3",
	Accent = "Accent",
	Dark = "Dark"
}

local brewerRGB = {
	Spectral = {
		[3] = {{252, 141, 89}, {255, 255, 191}, {153, 213, 148}},
		[4] = {{215, 25, 28}, {253, 174, 97}, {171, 221, 164}, {43, 131, 186}},
		[5] = {{215, 25, 28}, {253, 174, 97}, {255, 255, 191}, {171, 221, 164}, {43, 131, 186}},
		[6] = {{213, 62, 79}, {252, 141, 89}, {254, 224, 139}, {230, 245, 152}, {153, 213, 148},
		      {50, 136, 189}},
		[7] = {{213, 62, 79}, {252, 141, 89}, {254, 224, 139}, {255, 255, 191}, {230, 245, 152},
		      {153, 213, 148}, {50, 136, 189}},
		[8] = {{213, 62, 79}, {244, 109, 67}, {253, 174, 97}, {254, 224, 139}, {230, 245, 152},
		      {171, 221, 164}, {102, 194, 165}, {50, 136, 189}},
		[9] = {{213, 62, 79}, {244, 109, 67}, {253, 174, 97}, {254, 224, 139}, {255, 255, 191},
		      {230, 245, 152}, {171, 221, 164}, {102, 194, 165}, {50, 136, 189}},
		[10] = {{158, 1, 66}, {213, 62, 79}, {244, 109, 67}, {253, 174, 97}, {254, 224, 139},
		       {230, 245, 152}, {171, 221, 164}, {102, 194, 165}, {50, 136, 189}, {94, 79, 162}},
		[11] = {{158, 1, 66}, {213, 62, 79}, {244, 109, 67}, {253, 174, 97}, {254, 224, 139}, {255, 255, 191},
		       {230, 245, 152}, {171, 221, 164}, {102, 194, 165}, {50, 136, 189}, {94, 79, 162}},
		type = "divergent"
	},
	RdYlGn = {
		[3] = {{252, 141, 89}, {255, 255, 191}, {145, 207, 96}},
		[4] = {{215, 25, 28}, {253, 174, 97}, {166, 217, 106}, {26, 150, 65}},
		[5] = {{215, 25, 28}, {253, 174, 97}, {255, 255, 191}, {166, 217, 106}, {26, 150, 65}},
		[6] = {{215, 48, 39}, {252, 141, 89}, {254, 224, 139}, {217, 239, 139}, {145, 207, 96}, {26, 152, 80}},
		[7] = {{215, 48, 39}, {252, 141, 89}, {254, 224, 139}, {255, 255, 191}, {217, 239, 139},
		      {145, 207, 96}, {26, 152, 80}},
		[8] = {{215, 48, 39}, {244, 109, 67}, {253, 174, 97}, {254, 224, 139}, {217, 239, 139},
		      {166, 217, 106}, {102, 189, 99}, {26, 152, 80}},
		[9] = {{215, 48, 39}, {244, 109, 67}, {253, 174, 97}, {254, 224, 139}, {255, 255, 191},
		       {217, 239, 139}, {166, 217, 106}, {102, 189, 99}, {26, 152, 80}},
		[10] = {{165, 0, 38}, {215, 48, 39}, {244, 109, 67}, {253, 174, 97}, {254, 224, 139},
		       {217, 239, 139}, {166, 217, 106}, {102, 189, 99}, {26, 152, 80}, {0, 104, 55}},
		[11] = {{165, 0, 38}, {215, 48, 39}, {244, 109, 67}, {253, 174, 97}, {254, 224, 139},
		       {255, 255, 191}, {217, 239, 139}, {166, 217, 106}, {102, 189, 99}, {26, 152, 80},
		       {0, 104, 55}},
		type = "divergent"
	},
	RdBu = {
		[2] = {{239, 138, 98}, {103, 169, 207}},
		[3] = {{239, 138, 98}, {247, 247, 247}, {103, 169, 207}},
		[4] = {{202, 0, 32}, {244, 165, 130}, {146, 197, 222}, {5, 113, 176}},
		[5] = {{202, 0, 32}, {244, 165, 130}, {247, 247, 247}, {146, 197, 222}, {5, 113, 176}},
		[6] = {{178, 24, 43}, {239, 138, 98}, {253, 219, 199}, {209, 229, 240}, {103, 169, 207},
		      {33, 102, 172}},
		[7] = {{178, 24, 43}, {239, 138, 98}, {253, 219, 199}, {247, 247, 247}, {209, 229, 240},
		      {103, 169, 207}, {33, 102, 172}},
		[8] = {{178, 24, 43}, {214, 96, 77}, {244, 165, 130}, {253, 219, 199}, {209, 229, 240},
		      {146, 197, 222}, {67, 147, 195}, {33, 102, 172}},
		[9] = {{178, 24, 43}, {214, 96, 77}, {244, 165, 130}, {253, 219, 199}, {247, 247, 247},
		      {209, 229, 240}, {146, 197, 222}, {67, 147, 195}, {33, 102, 172}},
		[10] = {{103, 0, 31}, {178, 24, 43}, {214, 96, 77}, {244, 165, 130}, {253, 219, 199},
		       {209, 229, 240}, {146, 197, 222}, {67, 147, 195}, {33, 102, 172}, {5, 48, 97}},
		[11] = {{103, 0, 31}, {178, 24, 43}, {214, 96, 77}, {244, 165, 130}, {253, 219, 199},
		       {247, 247, 247}, {209, 229, 240}, {146, 197, 222}, {67, 147, 195}, {33, 102, 172},
		       {5, 48, 97}},
		type = "divergent"
	},
	PiYG = {
		[2] = {{233, 163, 201}, {161, 215, 106}},
		[3] = {{233, 163, 201}, {247, 247, 247}, {161, 215, 106}},
		[4] = {{208, 28, 139}, {241, 182, 218}, {184, 225, 134}, {77, 172, 38}},
		[5] = {{208, 28, 139}, {241, 182, 218}, {247, 247, 247}, {184, 225, 134}, {77, 172, 38}},
		[6] = {{197, 27, 125}, {233, 163, 201}, {253, 224, 239}, {230, 245, 208}, {161, 215, 106},
		      {77, 146, 33}},
		[7] = {{197, 27, 125}, {233, 163, 201}, {253, 224, 239}, {247, 247, 247}, {230, 245, 208},
		      {161, 215, 106}, {77, 146, 33}},
		[8] = {{197, 27, 125}, {222, 119, 174}, {241, 182, 218}, {253, 224, 239}, {230, 245, 208},
		      {184, 225, 134}, {127, 188, 65}, {77, 146, 33}},
		[9] = {{197, 27, 125}, {222, 119, 174}, {241, 182, 218}, {253, 224, 239}, {247, 247, 247},
		      {230, 245, 208}, {184, 225, 134}, {127, 188, 65}, {77, 146, 33}},
		[10] = {{142, 1, 82}, {197, 27, 125}, {222, 119, 174}, {241, 182, 218}, {253, 224, 239},
		       {230, 245, 208}, {184, 225, 134}, {127, 188, 65}, {77, 146, 33}, {39, 100, 25}},
		[11] = {{142, 1, 82}, {197, 27, 125}, {222, 119, 174}, {241, 182, 218}, {253, 224, 239},
		      {247, 247, 247}, {230, 245, 208}, {184, 225, 134}, {127, 188, 65}, {77, 146, 33}, {39, 100, 25}},
		type = "divergent"
	},
	PRGn = {
		[3] = {{175, 141, 195}, {247, 247, 247}, {127, 191, 123}},
		[4] = {{123, 50, 148}, {194, 165, 207}, {166, 219, 160}, {0, 136, 55}},
		[5] = {{123, 50, 148}, {194, 165, 207}, {247, 247, 247}, {166, 219, 160}, {0, 136, 55}},
		[6] = {{118, 42, 131}, {175, 141, 195}, {231, 212, 232}, {217, 240, 211}, {127, 191, 123},
		      {27, 120, 55}},
		[7] = {{118, 42, 131}, {175, 141, 195}, {231, 212, 232}, {247, 247, 247}, {217, 240, 211},
		      {127, 191, 123}, {27, 120, 55}},
		[8] = {{118, 42, 131}, {153, 112, 171}, {194, 165, 207}, {231, 212, 232}, {217, 240, 211},
		      {166, 219, 160}, {90, 174, 97},
		      {27, 120, 55}},
		[9] = {{118, 42, 131}, {153, 112, 171}, {194, 165, 207}, {231, 212, 232}, {247, 247, 247},
		      {217, 240, 211}, {166, 219, 160}, {90, 174, 97}, {27, 120, 55}},
		[10] = {{64, 0, 75}, {118, 42, 131}, {153, 112, 171}, {194, 165, 207}, {231, 212, 232},
		       {217, 240, 211}, {166, 219, 160}, {90, 174, 97}, {27, 120, 55}, {0, 68, 27}},
		[11] = {{64, 0, 75}, {118, 42, 131}, {153, 112, 171}, {194, 165, 207}, {231, 212, 232},
		       {247, 247, 247}, {217, 240, 211}, {166, 219, 160}, {90, 174, 97}, {27, 120, 55}, {0, 68, 27}},
		type = "divergent"
	},
	RdYlBu = {
		[2] = {{252, 141, 89}, {145, 191, 219}},
		[3] = {{252, 141, 89}, {255, 255, 191}, {145, 191, 219}},
		[4] = {{215, 25, 28}, {253, 174, 97}, {171, 217, 233}, {44, 123, 182}},
		[5] = {{215, 25, 28}, {253, 174, 97}, {255, 255, 191}, {171, 217, 233}, {44, 123, 182}},
		[6] = {{215, 48, 39}, {252, 141, 89}, {254, 224, 144}, {224, 243, 248}, {145, 191, 219},
		      {69, 117, 180}},
		[7] = {{215, 48, 39}, {252, 141, 89}, {254, 224, 144}, {255, 255, 191}, {224, 243, 248},
		      {145, 191, 219}, {69, 117, 180}},
		[8] = {{215, 48, 39}, {244, 109, 67}, {253, 174, 97}, {254, 224, 144}, {224, 243, 248},
		      {171, 217, 233}, {116, 173, 209}, {69, 117, 180}},
		[9] = {{215, 48, 39}, {244, 109, 67}, {253, 174, 97}, {254, 224, 144}, {255, 255, 191},
		      {224, 243, 248}, {171, 217, 233}, {116, 173, 209}, {69, 117, 180}},
		[10] = {{165, 0, 38}, {215, 48, 39}, {244, 109, 67}, {253, 174, 97}, {254, 224, 144},
		       {224, 243, 248}, {171, 217, 233}, {116, 173, 209}, {69, 117, 180}, {49, 54, 149}},
		[11] = {{165, 0, 38}, {215, 48, 39}, {244, 109, 67}, {253, 174, 97}, {254, 224, 144},
		       {255, 255, 191}, {224, 243, 248}, {171, 217, 233}, {116, 173, 209}, {69, 117, 180}, {49, 54, 149}},
		type = "divergent"
	},
	BrBG = {
		[2] = {{216, 179, 101}, {90, 180, 172}},
		[3] = {{216, 179, 101}, {245, 245, 245}, {90, 180, 172}},
		[4] = {{166, 97, 26}, {223, 194, 125}, {128, 205, 193}, {1, 133, 113}},
		[5] = {{166, 97, 26}, {223, 194, 125}, {245, 245, 245}, {128, 205, 193}, {1, 133, 113}},
		[6] = {{140, 81, 10}, {216, 179, 101}, {246, 232, 195}, {199, 234, 229}, {90, 180, 172},
		      {1, 102, 94}},
		[7] = {{140, 81, 10}, {216, 179, 101}, {246, 232, 195}, {245, 245, 245}, {199, 234, 229},
		      {90, 180, 172}, {1, 102, 94}},
		[8] = {{140, 81, 10}, {191, 129, 45}, {223, 194, 125}, {246, 232, 195}, {199, 234, 229},
		      {128, 205, 193}, {53, 151, 143}, {1, 102, 94}},
		[9] = {{140, 81, 10}, {191, 129, 45}, {223, 194, 125}, {246, 232, 195}, {245, 245, 245},
		      {199, 234, 229}, {128, 205, 193}, {53, 151, 143}, {1, 102, 94}},
		[10] = {{84, 48, 5}, {140, 81, 10}, {191, 129, 45}, {223, 194, 125}, {246, 232, 195},
		       {199, 234, 229}, {128, 205, 193}, {53, 151, 143}, {1, 102, 94}, {0, 60, 48}},
		[11] = {{84, 48, 5}, {140, 81, 10}, {191, 129, 45}, {223, 194, 125}, {246, 232, 195},
		       {245, 245, 245}, {199, 234, 229}, {128, 205, 193}, {53, 151, 143}, {1, 102, 94}, {0, 60, 48}},
		type = "divergent"
	},
	RdGy = {
		[2] = {{239, 138, 98}, {153, 153, 153}},
		[3] = {{239, 138, 98}, {255, 255, 255}, {153, 153, 153}},
		[4] = {{202, 0, 32}, {244, 165, 130}, {186, 186, 186}, {64, 64, 64}},
		[5] = {{202, 0, 32}, {244, 165, 130}, {255, 255, 255}, {186, 186, 186}, {64, 64, 64}},
		[6] = {{178, 24, 43}, {239, 138, 98}, {253, 219, 199}, {224, 224, 224}, {153, 153, 153},
		      {77, 77,77}},
		[7] = {{178, 24, 43}, {239, 138, 98}, {253, 219, 199}, {255, 255, 255}, {224, 224, 224},
		      {153, 153, 153}, {77, 77,77}},
		[8] = {{178, 24, 43}, {214, 96, 77}, {244, 165, 130}, {253, 219, 199}, {224, 224, 224},
		      {186, 186, 186}, {135, 135, 135}, {77, 77,77}},
		[9] = {{178, 24, 43}, {214, 96, 77}, {244, 165, 130}, {253, 219, 199}, {255, 255, 255},
		      {224, 224, 224}, {186, 186, 186},  {135, 135, 135}, {77, 77,77}},
		[10] = {{103, 0, 31}, {178, 24, 43}, {214, 96, 77}, {244, 165, 130}, {253, 219, 199},
		       {224, 224, 224}, {186, 186, 186}, {135, 135, 135}, {77, 77,77}, {26, 26, 26}},
		[11] = {{103, 0, 31}, {178, 24, 43}, {214, 96, 77}, {244, 165, 130}, {253, 219, 199},
		       {255, 255, 255}, {224, 224, 224}, {186, 186, 186}, {135, 135, 135}, {77, 77,77}, {26, 26, 26}},
		type = "divergent"
	},
	PuOr = {
		[2] = {{241, 163, 64}, {153, 142, 195}},
		[3] = {{241, 163, 64}, {247, 247, 247}, {153, 142, 195}},
		[4] = {{230, 97, 1}, {253, 184, 99}, {178, 171, 210}, {94, 60, 153}},
		[5] = {{230, 97, 1}, {253, 184, 99}, {247, 247, 247}, {178, 171, 210}, {94, 60, 153}},
		[6] = {{179, 88, 6}, {241, 163, 64}, {254, 224, 182}, {216, 218, 235}, {153, 142, 195},
		      {84, 39, 136}},
		[7] = {{179, 88, 6}, {241, 163, 64}, {254, 224, 182}, {247, 247, 247}, {216, 218, 235},
		      {153, 142, 195}, {84, 39, 136}},
		[8] = {{179, 88, 6}, {224, 130, 20}, {253, 184, 99}, {254, 224, 182}, {216, 218, 235},
		      {178, 171, 210}, {128, 115, 172}, {84, 39, 136}},
		[9] = {{179, 88, 6}, {224, 130, 20}, {253, 184, 99}, {254, 224, 182}, {247, 247, 247},
		      {216, 218, 235}, {178, 171, 210}, {128, 115, 172}, {84, 39, 136}},
		[10] = {{127, 59, 8}, {179, 88, 6}, {224, 130, 20}, {253, 184, 99}, {254, 224, 182},
		       {216, 218, 235}, {178, 171, 210}, {128, 115, 172}, {84, 39, 136}, {45, 0, 75}},
		[11] = {{127, 59, 8}, {179, 88, 6}, {224, 130, 20}, {253, 184, 99}, {254, 224, 182},
		       {247, 247, 247}, {216, 218, 235}, {178, 171, 210}, {128, 115, 172}, {84, 39, 136}, {45, 0, 75}},
		type = "divergent"
	},
	Set2 = {
		[3] = {{102, 194, 165}, {252, 141, 98}, {141, 160, 203}},
		[4] = {{102, 194, 165}, {252, 141, 98}, {141, 160, 203}, {231, 138, 195}},
		[5] = {{102, 194, 165}, {252, 141, 98}, {141, 160, 203}, {231, 138, 195}, {166, 216, 84}},
		[6] = {{102, 194, 165}, {252, 141, 98}, {141, 160, 203}, {231, 138, 195}, {166, 216, 84},
		      {255, 217, 47}},
		[7] = {{102, 194, 165}, {252, 141, 98}, {141, 160, 203}, {231, 138, 195}, {166, 216, 84},
		      {255, 217, 47}, {229, 196, 148}},
		[8] = {{102, 194, 165}, {252, 141, 98}, {141, 160, 203}, {231, 138, 195}, {166, 216, 84},
		      {255, 217, 47}, {229, 196, 148}, {179, 179, 179}},
		type = "qualitative"
	},
	Accent = {
		[3] = {{127, 201, 127}, {190, 174, 212}, {253, 192, 134}},
		[4] = {{127, 201, 127}, {190, 174, 212}, {253, 192, 134}, {255, 255, 153}},
		[5] = {{127, 201, 127}, {190, 174, 212}, {253, 192, 134}, {255, 255, 153}, {56, 108, 176}},
		[6] = {{127, 201, 127}, {190, 174, 212}, {253, 192, 134}, {255, 255, 153}, {56, 108, 176},
		      {240, 2, 127}},
		[7] = {{127, 201, 127}, {190, 174, 212}, {253, 192, 134}, {255, 255, 153}, {56, 108, 176},
		      {240, 2, 127}, {191, 91, 23}},
		[8] = {{127, 201, 127}, {190, 174, 212}, {253, 192, 134}, {255, 255, 153}, {56, 108, 176},
		      {240, 2, 127}, {191, 91, 23}, {102, 102, 102}},
		type = "qualitative"
	},
	Set1 = {
		[3] = {{228, 26, 28}, {55, 126, 184}, {77, 175, 74}},
		[4] = {{228, 26, 28}, {55, 126, 184}, {77, 175, 74}, {152,78, 163}},
		[5] = {{228, 26, 28}, {55, 126, 184}, {77, 175, 74}, {152,78, 163}, {255, 127, 0}},
		[6] = {{228, 26, 28}, {55, 126, 184}, {77, 175, 74}, {152,78, 163}, {255, 127, 0},
		      {255, 255, 51}},
		[7] = {{228, 26, 28}, {55, 126, 184}, {77, 175, 74}, {152,78, 163}, {255, 127, 0},
		      {255, 255, 51}, {166, 86, 40}},
		[8] = {{228, 26, 28}, {55, 126, 184}, {77, 175, 74}, {152,78, 163}, {255, 127, 0},
		      {255, 255, 51}, {166, 86, 40}, {247, 129, 191}},
		[9] = {{228, 26, 28}, {55, 126, 184}, {77, 175, 74}, {152,78, 163}, {255, 127, 0},
		      {255, 255, 51}, {166, 86, 40}, {247, 129, 191}, {153, 153, 153}},
		type = "qualitative"
	},
	Set3 = {
		[3] = {{141, 211, 199}, {255, 255, 179}, {190, 186, 218}},
		[4] = {{141, 211, 199}, {255, 255, 179}, {190, 186, 218}, {251, 128, 114}},
		[5] = {{141, 211, 199}, {255, 255, 179}, {190, 186, 218}, {251, 128, 114}, {128, 177, 211}},
		[6] = {{141, 211, 199}, {255, 255, 179}, {190, 186, 218}, {251, 128, 114}, {128, 177, 211},
		      {253, 180, 98}},
		[7] = {{141, 211, 199}, {255, 255, 179}, {190, 186, 218}, {251, 128, 114}, {128, 177, 211},
		      {253, 180, 98}, {179, 222, 105}},
		[8] = {{141, 211, 199}, {255, 255, 179}, {190, 186, 218}, {251, 128, 114}, {128, 177, 211},
		      {253, 180, 98}, {179, 222, 105}, {252, 205, 229}},
		[9] = {{141, 211, 199}, {255, 255, 179}, {190, 186, 218}, {251, 128, 114}, {128, 177, 211},
		      {253, 180, 98}, {179, 222, 105}, {252, 205, 229}, {217, 217, 217}},
		[10] = {{141, 211, 199}, {255, 255, 179}, {190, 186, 218}, {251, 128, 114}, {128, 177, 211},
		       {253, 180, 98}, {179, 222, 105}, {252, 205, 229}, {217, 217, 217}, {188, 128, 189}},
		[11] = {{141, 211, 199}, {255, 255, 179}, {190, 186, 218}, {251, 128, 114}, {128, 177, 211},
		       {253, 180, 98}, {179, 222, 105}, {252, 205, 229}, {217, 217, 217}, {188, 128, 189},
		       {204, 235, 197}},
		[12] = {{141, 211, 199}, {255, 255, 179}, {190, 186, 218}, {251, 128, 114}, {128, 177, 211},
		       {253, 180, 98}, {179, 222, 105}, {252, 205, 229}, {217, 217, 217}, {188, 128, 189},
		       {204, 235, 197}, {255, 237, 111}},
		type = "qualitative"
	},
	Dark = {
		[3] = {{27, 158, 119}, {217, 95, 2}, {117, 112, 179}},
		[4] = {{27, 158, 119}, {217, 95, 2}, {117, 112, 179}, {231, 41, 138}},
		[5] = {{27, 158, 119}, {217, 95, 2}, {117, 112, 179}, {231, 41, 138}, {102, 166, 30}},
		[6] = {{27, 158, 119}, {217, 95, 2}, {117, 112, 179}, {231, 41, 138}, {102, 166, 30},
		      {230, 171, 2}},
		[7] = {{27, 158, 119}, {217, 95, 2}, {117, 112, 179}, {231, 41, 138}, {102, 166, 30},
		      {230, 171, 2}, {166, 118, 29}},
		[8] = {{27, 158, 119}, {217, 95, 2}, {117, 112, 179}, {231, 41, 138}, {102, 166, 30},
		      {230, 171, 2}, {166, 118, 29}, {102, 102, 102}},
		type = "qualitative"
	},
	Paired = {
		[3] = {{166, 206, 227}, {31, 120, 180}, {178, 223, 138}},
		[4] = {{166, 206, 227}, {31, 120, 180}, {178, 223, 138}, {51, 160, 44}},
		[5] = {{166, 206, 227}, {31, 120, 180}, {178, 223, 138}, {51, 160, 44}, {251, 154, 153}},
		[6] = {{166, 206, 227}, {31, 120, 180}, {178, 223, 138}, {51, 160, 44}, {251, 154, 153},
		      {227, 26, 28}},
		[7] = {{166, 206, 227}, {31, 120, 180}, {178, 223, 138}, {51, 160, 44}, {251, 154, 153},
		      {227, 26, 28}, {253, 191, 111}},
		[8] = {{166, 206, 227}, {31, 120, 180}, {178, 223, 138}, {51, 160, 44}, {251, 154, 153},
		      {227, 26, 28}, {253, 191, 111}, {255, 127, 0}},
		[9] = {{166, 206, 227}, {31, 120, 180}, {178, 223, 138}, {51, 160, 44}, {251, 154, 153},
		      {227, 26, 28}, {253, 191, 111}, {255, 127, 0}, {202, 178, 214}},
		[10] = {{166, 206, 227}, {31, 120, 180}, {178, 223, 138}, {51, 160, 44}, {251, 154, 153},
		       {227, 26, 28}, {253, 191, 111}, {255, 127, 0}, {202, 178, 214}, {106, 61, 154}},
		[11] = {{166, 206, 227}, {31, 120, 180}, {178, 223, 138}, {51, 160, 44}, {251, 154, 153},
		       {227, 26, 28}, {253, 191, 111}, {255, 127, 0}, {202, 178, 214}, {106, 61, 154},
		       {255, 255, 153}},
		[12] = {{166, 206, 227}, {31, 120, 180}, {178, 223, 138}, {51, 160, 44}, {251, 154, 153},
		       {227, 26, 28}, {253, 191, 111}, {255, 127, 0}, {202, 178, 214}, {106, 61, 154},
		       {255, 255, 153}, {177, 89, 40}},
		type = "qualitative"
	},
	Pastel2 = {
		[2] = {{179, 226, 205}, {203, 213, 232}},
		[3] = {{179, 226, 205}, {253, 205, 172}, {203, 213, 232}},
		[4] = {{179, 226, 205}, {253, 205, 172}, {203, 213, 232}, {244, 202, 228}},
		[5] = {{179, 226, 205}, {253, 205, 172}, {203, 213, 232}, {244, 202, 228}, {230, 245, 201}},
		[6] = {{179, 226, 205}, {253, 205, 172}, {203, 213, 232}, {244, 202, 228}, {230, 245, 201},
		      {255, 242, 174}},
		[7] = {{179, 226, 205}, {253, 205, 172}, {203, 213, 232}, {244, 202, 228}, {230, 245, 201},
		      {255, 242, 174}, {241, 226, 204}},
		[8] = {{179, 226, 205}, {253, 205, 172}, {203, 213, 232}, {244, 202, 228}, {230, 245, 201},
		      {255, 242, 174}, {241, 226, 204}, {204, 204, 204}},
		type = "qualitative"
	},
	Pastel1 = {
		[2] = {{251, 180, 174}, {204, 235, 197}},
		[3] = {{251, 180, 174}, {179, 205, 227}, {204, 235, 197}},
		[4] = {{251, 180, 174}, {179, 205, 227}, {204, 235, 197}, {222, 203, 228}},
		[5] = {{251, 180, 174}, {179, 205, 227}, {204, 235, 197}, {222, 203, 228}, {254, 217, 166}},
		[6] = {{251, 180, 174}, {179, 205, 227}, {204, 235, 197}, {222, 203, 228}, {254, 217, 166},
		      {255, 255, 204}},
		[7] = {{251, 180, 174}, {179, 205, 227}, {204, 235, 197}, {222, 203, 228}, {254, 217, 166},
		      {255, 255, 204}, {229, 216, 189}},
		[8] = {{251, 180, 174}, {179, 205, 227}, {204, 235, 197}, {222, 203, 228}, {254, 217, 166},
		      {255, 255, 204}, {229, 216, 189}, {253, 218, 236}},
		[9] = {{251, 180, 174}, {179, 205, 227}, {204, 235, 197}, {222, 203, 228}, {254, 217, 166},
		      {255, 255, 204}, {229, 216, 189}, {253, 218, 236}, {242, 242, 242}},
		type = "qualitative"
	},
	OrRd = {
		[3] = {{254, 232, 200}, {253, 187, 132}, {227, 74, 51}},
		[4] = {{254, 240, 217}, {253, 204, 138}, {252, 141, 89}, {215, 48, 31}},
		[5] = {{254, 240, 217}, {253, 204, 138}, {252, 141, 89}, {227, 74, 51}, {179, 0, 0}},
		[6] = {{254, 240, 217}, {253, 212, 158}, {253, 187, 132}, {252, 141, 89}, {227, 74, 51},
		      {179, 0, 0}},
		[7] = {{254, 240, 217}, {253, 212, 158}, {253, 187, 132}, {252, 141, 89}, {239, 101, 72},
		      {215, 48, 31}, {153, 0, 0}},
		[8] = {{255, 247, 236}, {254, 232, 200}, {253, 212, 158}, {253, 187, 132}, {252, 141, 89},
		      {239, 101, 72}, {215, 48, 31}, {153, 0, 0}},
		[9] = {{255, 247, 236}, {254, 232, 200}, {253, 212, 158}, {253, 187, 132}, {252, 141, 89},
		      {239, 101, 72}, {215, 48, 31}, {179, 0, 0}, {127, 0,0}},
		[10] = {{255, 247, 235}, {254, 235, 207}, {253, 220, 176}, {253, 203, 149}, {253, 182, 127},
		       {252, 146, 93}, {243, 114, 77}, {228,79, 53}, {200, 39, 24}, {153, 0, 0}},
		[11] = {{255, 247, 235}, {254, 236, 210}, {253, 223, 183}, {253, 209, 155}, {253, 192, 137},
		       {253, 164, 110}, {249, 133, 85}, {240, 105, 73}, {224,71, 47}, {196, 36, 21}, {153, 0, 0}},
		[12] = {{255, 247, 235}, {254, 237, 213}, {254, 226, 188}, {253, 213, 161}, {253, 198, 143},
		       {253, 178, 124}, {252, 149, 96}, {246, 123, 81}, {236, 96, 68}, {221, 64, 42}, {192, 33, 19},
		       {153, 0, 0}},
		[13] = {{255, 247, 235}, {254, 238, 214}, {254, 228, 192}, {253, 216, 168}, {253, 203, 149},
		       {253, 189, 134}, {253, 164, 110}, {250, 137, 87}, {243, 114, 77}, {233, 89, 61},
		       {219, 58, 37}, {188, 31, 18}, {153, 0, 0}},
		[14] = {{255, 247, 235}, {254, 238, 216}, {254, 230, 196}, {253, 219, 174}, {253, 208, 153},
		       {253, 194, 139}, {253, 176, 121}, {252, 151, 98}, {248, 129, 83}, {241, 107, 74}, {230, 82, 56},
		       {216, 52, 34}, {185, 29, 16}, {153, 0, 0}},
		[15] = {{255, 247, 235}, {254, 239, 217}, {254, 231, 199}, {253, 221, 178}, {253, 211, 158},
		       {253, 199, 144}, {253, 186, 132}, {253, 164, 110}, {252, 140, 89}, {245, 121, 80},
		       {238, 101, 71}, {227,76, 51}, {215, 48, 31}, {183, 27, 15}, {153, 0, 0}},
		[16] = {{255, 247, 235}, {254, 239, 219}, {254, 232, 202}, {253, 223, 183},
		       {253, 214, 163}, {253, 203, 149}, {253, 192, 137}, {253, 174, 120},
		       {252, 153, 100}, {249, 133, 85}, {243, 114, 77}, {235, 94, 66}, {224,71, 47},
		       {210, 45, 28}, {181, 26, 14}, {153, 0, 0}},
		[17] = {{255, 247, 235}, {254, 240, 220}, {254, 233, 204}, {254, 225, 186},
		       {253, 216, 168}, {253, 207, 153}, {253, 196, 141}, {253, 184, 129},
		       {253, 164, 110}, {252, 143, 91}, {247, 126, 82}, {241, 108, 75}, {233, 89, 61},
		       {222, 66, 43}, {207, 43, 27}, {179, 24, 13}, {153, 0, 0}},
		[18] = {{255, 247, 235}, {254, 240, 221}, {254, 234, 206}, {254, 227, 190},
		       {253, 219, 172}, {253, 210, 156}, {253, 200, 145}, {253, 189, 135},
		       {253, 173, 119}, {252, 154, 101}, {250, 136, 86}, {245, 120, 79},
		       {239, 103, 72}, {230, 84, 57}, {220, 62, 40}, {203, 41, 25},
		       {178, 23, 12}, {153, 0, 0}},
		[19] = {{255, 247, 235}, {254, 241, 221}, {254, 235, 207}, {254, 228, 192},
		       {253, 220, 176}, {253, 213, 160}, {253, 203, 149}, {253, 193, 139},
		       {253, 182, 127}, {253, 164, 110}, {252, 146, 93}, {248, 130, 84},
		       {243, 114, 77}, {237, 98, 69}, {228,79, 53}, {219, 58, 37}, {200, 39, 24},
		       {176, 22, 11}, {153, 0, 0}},
		[20] = {{255, 247, 235}, {254, 241, 222}, {254, 235, 209}, {254, 229, 195},
		       {253, 222, 180}, {253, 215, 164}, {253, 206, 152}, {253, 197, 142},
		       {253, 188, 133}, {253, 172, 118}, {252, 155, 102}, {251, 138, 88},
		       {246, 124, 81}, {241, 109, 75}, {235, 93, 65}, {226,75, 50},
		       {217, 54, 35}, {198, 37, 22}, {175, 21, 11}, {153, 0, 0}},
		type = "sequential"
	},
	PuBu = {
		[3] = {{236, 231, 242}, {166, 189, 219}, {43, 140, 190}},
		[4] = {{241, 238, 246}, {189, 201, 225}, {116, 169, 207}, {5, 112, 176}},
		[5] = {{241, 238, 246}, {189, 201, 225}, {116, 169, 207}, {43, 140, 190}, {4, 90, 141}},
		[6] = {{241, 238, 246}, {208, 209, 230}, {166, 189, 219}, {116, 169, 207}, {43, 140, 190},
		      {4, 90, 141}},
		[7] = {{241, 238, 246}, {208, 209, 230}, {166, 189, 219}, {116, 169, 207}, {54, 144, 192},
		      {5, 112, 176}, {3, 78, 123}},
		[8] = {{255, 247, 251}, {236, 231, 242}, {208, 209, 230}, {166, 189, 219}, {116, 169, 207},
		      {54, 144, 192}, {5, 112, 176}, {3, 78, 123}},
		[9] = {{255, 247, 251}, {236, 231, 242}, {208, 209, 230}, {166, 189, 219}, {116, 169, 207},
		      {54, 144, 192}, {5, 112, 176}, {4, 90, 141}, {2, 56, 88}},
		[10] = {{255, 247, 250}, {240, 234, 243}, {220, 218, 235}, {194, 202, 226},
		       {160, 186, 217}, {121, 171, 208}, {78, 152, 197}, {38, 129, 184},
		       {4, 104, 163}, {2, 77, 122}},
		[11] = {{255, 247, 250}, {241, 235, 244}, {224, 222, 237}, {203, 206, 228},
		       {174, 192, 221}, {141, 178, 213}, {105, 163, 204}, {62, 146, 193},
		       {32, 124, 182}, {4, 101, 159}, {2, 77, 122}},
		[12] = {{255, 247, 250}, {242, 236, 245}, {228, 224, 238}, {210, 210, 231},
		       {185, 198, 224}, {157, 185, 216}, {125, 172, 209}, {91, 157, 200},
		       {51, 141, 190}, {25, 120, 180}, {4, 99, 156}, {2, 77, 122}},
		[13] = {{255, 247, 250}, {243, 237, 245}, {231, 227, 239}, {214, 214, 232},
		       {194, 202, 226}, {169, 190, 219}, {141, 178, 213}, {111, 166, 205},
		       {78, 152, 197}, {45, 135, 188}, {19, 117, 178}, {4, 97, 153}, {2, 77, 122}},
		[14] = {{255, 247, 250}, {244, 238, 246}, {233, 229, 241}, {218, 217, 234},
		       {201, 205, 228}, {179, 195, 222}, {155, 184, 216}, {128, 173, 209},
		       {99, 161, 202}, {66, 147, 194}, {40, 131, 185}, {12, 114, 177},
		       {4, 96, 151}, {2, 77, 122}},
		[15] = {{255, 247, 250}, {245, 238, 246}, {235, 230, 242}, {221, 219, 235},
		       {208, 209, 229}, {187, 198, 224}, {165, 189, 218}, {141, 178, 213},
		       {115, 169, 206}, {88, 156, 199}, {53, 144, 191}, {36, 127, 184},
		       {5, 112, 176}, {3, 94, 149}, {2, 77, 122}},
		[16] = {{255, 247, 250}, {246, 239, 246}, {237, 232, 242}, {224, 222, 237},
		       {211, 211, 231}, {194, 202, 226}, {174, 192, 221}, {153, 183, 215},
		       {130, 174, 210}, {105, 163, 204}, {78, 152, 197}, {49, 139, 189},
		       {32, 124, 182}, {4, 109, 172}, {3, 93, 147}, {2, 77, 122}},
		[17] = {{255, 247, 250}, {246, 239, 247}, {238, 232, 243}, {227, 224, 238},
		       {214, 214, 232}, {200, 205, 227}, {181, 196, 223}, {163, 187, 218},
		       {141, 178, 213}, {119, 170, 207}, {95, 159, 201}, {68, 148, 194},
		       {45, 135, 188}, {27, 121, 181}, {4, 107, 169}, {3, 92, 145}, {2, 77, 122}},
		[18] = {{255, 247, 250}, {247, 240, 247}, {239, 233, 243}, {229, 225, 239},
		       {217, 216, 234}, {205, 207, 229}, {188, 199, 224}, {171, 191, 220},
		       {151, 183, 215}, {131, 174, 210}, {109, 166, 205}, {86, 155, 199},
		       {58, 145, 192}, {42, 132, 186}, {23, 119, 179}, {4, 105, 166},
		       {3, 91, 144}, {2, 77, 122}},
		[19] = {{255, 247, 250}, {247, 240, 247}, {240, 234, 243}, {231, 227, 239},
		       {220, 218, 235}, {209, 210, 230}, {194, 202, 226}, {177, 194, 222},
		       {160, 186, 217}, {141, 178, 213}, {121, 171, 208}, {101, 161, 202},
		       {78, 152, 197}, {52, 142, 191}, {38, 129, 184}, {19, 117, 178},
		       {4, 104, 163}, {3, 90, 143}, {2, 77, 122}},
		[20] = {{255, 247, 250}, {247, 241, 247}, {240, 235, 244}, {233, 228, 240},
		       {222, 220, 236}, {212, 212, 231}, {199, 204, 227}, {183, 197, 223},
		       {168, 190, 219}, {150, 182, 215}, {132, 175, 210}, {113, 167, 206},
		       {93, 158, 200}, {70, 149, 195}, {48, 138, 189}, {35, 126, 183},
		       {15, 115, 177}, {4, 102, 161}, {3, 90, 142}, {2, 77, 122}},
		type = "sequential"
	},
	BuPu = {
		[3] = {{224, 236, 244}, {158, 188, 218}, {136, 86, 167}},
		[4] = {{237, 248, 251}, {179, 205, 227}, {140, 150, 198}, {136, 65, 157}},
		[5] = {{237, 248, 251}, {179, 205, 227}, {140, 150, 198}, {136, 86, 167}, {129, 15, 124}},
		[6] = {{237, 248, 251}, {191, 211, 230}, {158, 188, 218}, {140, 150, 198}, {136, 86, 167},
		      {129, 15, 124}},
		[7] = {{237, 248, 251}, {191, 211, 230}, {158, 188, 218}, {140, 150, 198}, {140, 107, 177},
		      {136, 65, 157}, {110, 1, 107}},
		[8] = {{247, 252, 253}, {224, 236, 244}, {191, 211, 230}, {158, 188, 218}, {140, 150, 198},
		      {140, 107, 177}, {136, 65, 157}, {110, 1, 107}},
		[9] = {{247, 252, 253}, {224, 236, 244}, {191, 211, 230}, {158, 188, 218}, {140, 150, 198},
		      {140, 107, 177}, {136, 65, 157}, {129, 15, 124}, {77, 0, 75}},
		[10] = {{247, 252, 253}, {229, 239, 245}, {205, 222, 236}, {180, 203, 226},
		       {156, 183, 215}, {142, 154, 200}, {140, 121, 183}, {138, 89, 168},
		       {130, 54, 145}, {109, 0, 107}},
		[11] = {{247, 252, 253}, {230, 240, 246}, {210, 225, 238}, {187, 208, 228},
		       {164, 192, 220}, {149, 168, 207}, {140, 141, 193}, {140, 111, 179},
		       {138, 82, 164}, {128, 50, 141}, {109, 0, 107}},
		[12] = {{247, 252, 253}, {232, 241, 247}, {215, 229, 240}, {194, 213, 231},
		       {173, 198, 223}, {154, 181, 214}, {143, 156, 201}, {140, 130, 188},
		       {139, 103, 175}, {137, 77, 162}, {126, 46, 138}, {109, 0, 107}},
		[13] = {{247, 252, 253}, {233, 242, 247}, {218, 231, 241}, {199, 217, 233},
		       {180, 203, 226}, {160, 189, 219}, {149, 168, 207}, {140, 146, 196},
		       {140, 121, 183}, {139, 97, 171}, {136, 72, 160}, {125, 43, 135}, {109, 0, 107}},
		[14] = {{247, 252, 253}, {234, 243, 248}, {221, 234, 242}, {203, 220, 235},
		       {185, 207, 228}, {168, 195, 221}, {153, 179, 213}, {144, 158, 202},
		       {140, 136, 191}, {140, 113, 180}, {138, 91, 169}, {136, 68, 158},
		       {124, 41, 133}, {109, 0, 107}},
		[15] = {{247, 252, 253}, {235, 243, 248}, {223, 235, 243}, {207, 223, 236},
		       {191, 210, 229}, {174, 199, 224}, {158, 187, 217}, {149, 168, 207},
		       {140, 150, 197}, {140, 128, 187}, {140, 107, 177}, {138, 86, 166},
		       {135, 64, 157}, {123, 39, 131}, {109, 0, 107}},
		[16] = {{247, 252, 253}, {236, 244, 248}, {225, 237, 244}, {210, 225, 238},
		       {195, 214, 231}, {180, 203, 226}, {164, 192, 220}, {153, 177, 212},
		       {144, 160, 203}, {140, 141, 193}, {140, 121, 183}, {139, 101, 174},
		       {138, 82, 164}, {134, 61, 153}, {122, 37, 129}, {109, 0, 107}},
		[17] = {{247, 252, 253}, {236, 244, 249}, {226, 237, 245}, {213, 228, 239},
		       {199, 217, 233}, {184, 206, 227}, {170, 196, 222}, {156, 185, 216},
		       {149, 168, 207}, {141, 152, 199}, {140, 134, 190}, {140, 115, 180},
		       {139, 97, 171}, {137, 78, 163}, {132, 58, 150}, {121, 35, 128}, {109, 0, 107}},
		[18] = {{247, 252, 253}, {237, 245, 249}, {228, 238, 245}, {216, 230, 240},
		       {202, 219, 234}, {189, 209, 229}, {175, 200, 224}, {161, 190, 219},
		       {152, 176, 212}, {145, 161, 203}, {140, 145, 195}, {140, 127, 186},
		       {140, 109, 178}, {139, 92, 169}, {137, 75, 161}, {131, 56, 147},
		       {121, 34, 127}, {109, 0, 107}},
		[19] = {{247, 252, 253}, {238, 245, 249}, {229, 239, 245}, {218, 231, 241},
		       {205, 222, 236}, {192, 212, 230}, {180, 203, 226}, {167, 194, 221},
		       {156, 183, 215}, {149, 168, 207}, {142, 154, 200}, {140, 138, 192},
		       {140, 121, 183}, {139, 104, 175}, {138, 89, 168}, {136, 72, 160},
		       {130, 54, 145}, {120, 32, 126}, {109, 0, 107}},
		[20] = {{247, 252, 253}, {238, 246, 249}, {230, 240, 246}, {220, 233, 242},
		       {208, 224, 237}, {196, 214, 232}, {184, 206, 227}, {172, 197, 223},
		       {159, 189, 218}, {152, 175, 211}, {145, 161, 204}, {140, 147, 196},
		       {140, 132, 189}, {140, 116, 181}, {139, 100, 173}, {138, 85, 166},
		       {136, 69, 159}, {129, 51, 143}, {119, 31, 125}, {109, 0, 107}},
		type = "sequential"
	},
	Oranges = {
		[2] = {{254, 230, 206}, {230, 85, 13}},
		[3] = {{254, 230, 206}, {253, 174, 107}, {230, 85, 13}},
		[4] = {{254, 237, 222}, {253, 190, 133}, {253, 141, 60}, {217, 71, 1}},
		[5] = {{254, 237, 222}, {253, 190, 133}, {253, 141, 60}, {230, 85, 13}, {166, 54, 3}},
		[6] = {{254, 237, 222}, {253, 208, 162}, {253, 174, 107}, {253, 141, 60}, {230, 85, 13},
		      {166, 54, 3}},
		[7] = {{254, 237, 222}, {253, 208, 162}, {253, 174, 107}, {253, 141, 60}, {241, 105, 19},
		      {217, 72, 1}, {140, 45, 4}},
		[8] = {{255, 245, 235}, {254, 230, 206}, {253, 208, 162}, {253, 174, 107}, {253, 141, 60},
		      {241, 105, 19}, {217, 72, 1}, {140, 45, 4}},
		[9] = {{255, 245, 235}, {254, 230, 206}, {253, 208, 162}, {253, 174, 107}, {253, 141, 60},
		      {241, 105, 19}, {217, 72, 1}, {166, 54, 3}, {127, 39, 4}},
		[10] = {{255, 244, 235}, {254, 233, 212}, {253, 217, 181}, {253, 196, 143}, {253, 170, 101},
		       {253, 144, 65}, {245, 117, 34}, {230, 90, 10}, {199, 65, 2}, {140, 44, 4}},
		[11] = {{255, 244, 235}, {254, 234, 214}, {254, 221, 188}, {253, 204, 156},
		       {253, 180, 117}, {253, 157, 83}, {250, 134, 52}, {242, 108, 24}, {226, 85, 7},
		       {193, 63, 2}, {140, 44, 4}},
		[12] = {{255, 244, 235}, {254, 235, 216}, {254, 223, 193}, {253, 209, 165},
		       {253, 189, 131}, {253, 168, 98}, {253, 147, 68}, {247, 124, 43},
		       {238, 102, 17}, {223, 81, 5}, {188, 61, 2}, {140, 44, 4}},
		[13] = {{255, 244, 235}, {254, 236, 218}, {254, 226, 198}, {253, 213, 172},
		       {253, 196, 143}, {253, 176, 111}, {253, 157, 83}, {252, 138, 56},
		       {245, 117, 34}, {235, 97, 14}, {221, 77, 3}, {184, 60, 2}, {140, 44, 4}},
		[14] = {{255, 244, 235}, {254, 236, 219}, {254, 228, 202}, {253, 216, 178},
		       {253, 202, 153}, {253, 184, 123}, {253, 166, 96}, {253, 148, 71},
		       {249, 130, 48}, {242, 110, 26}, {231, 92, 11}, {218, 74, 2}, {180, 59, 3}, {140, 44, 4}},
		[15] = {{255, 244, 235}, {254, 237, 220}, {254, 229, 205}, {253, 218, 183},
		       {253, 208, 161}, {253, 191, 134}, {253, 173, 107}, {253, 157, 83},
		       {253, 140, 59}, {247, 123, 41}, {241, 104, 19}, {229, 88, 9},
		       {216, 71, 0}, {177, 58, 3}, {140, 44, 4}},
		[16] = {{255, 244, 235}, {254, 237, 221}, {254, 230, 207}, {254, 221, 188},
		       {253, 210, 167}, {253, 196, 143}, {253, 180, 117}, {253, 165, 94},
		       {253, 149, 72}, {250, 134, 52}, {245, 117, 34}, {237, 100, 16},
		       {226, 85, 7}, {211,70, 1}, {175, 57, 3}, {140, 44, 4}},
		[17] = {{255, 244, 235}, {254, 238, 222}, {254, 231, 209}, {254, 223, 192},
		       {253, 213, 172}, {253, 201, 151}, {253, 186, 127}, {253, 171, 104},
		       {253, 157, 83}, {253, 143, 63}, {248, 127, 46}, {243, 111, 28}, {235, 97, 14},
		       {224, 82, 5}, {207, 68, 1}, {172, 56, 3}, {140, 44, 4}},
		[18] = {{255, 244, 235}, {254, 238, 223}, {254, 232, 211}, {254, 224, 195},
		       {253, 215, 177}, {253, 206, 158}, {253, 192, 136}, {253, 178, 113},
		       {253, 164, 93}, {253, 150, 74}, {251, 136, 55}, {246, 122, 40},
		       {241, 107, 22}, {232, 93, 12}, {222, 80, 4}, {202, 67, 1}, {170, 55, 3}, {140, 44, 4}},
		[19] = {{255, 244, 235}, {254, 239, 223}, {254, 233, 212}, {254, 226, 198},
		       {253, 217, 181}, {253, 209, 164}, {253, 196, 143}, {253, 183, 122},
		       {253, 170, 101}, {253, 157, 83}, {253, 144, 65}, {249, 131, 49},
		       {245, 117, 34}, {239, 103, 18}, {230, 90, 10}, {221, 77, 3},
		       {199, 65, 2}, {169, 55, 3}, {140, 44, 4}},
		[20] = {{255, 244, 235}, {254, 239, 224}, {254, 233, 213}, {254, 227, 201},
		       {253, 219, 185}, {253, 211, 168}, {253, 200, 150}, {253, 188, 130},
		       {253, 175, 109}, {253, 163, 92}, {253, 151, 75}, {252, 139, 58},
		       {248, 126, 44}, {243, 112, 29}, {237, 99, 16}, {228, 88, 8}, {219, 75, 2},
		       {196, 64, 2}, {167, 54, 3}, {140, 44, 4}},
		type = "sequential"
	},
	BuGn = {
		[3] = {{229, 245, 249}, {153, 216, 201}, {44, 162, 95}},
		[4] = {{237, 248, 251}, {178, 226, 226}, {102, 194, 164}, {35, 139, 69}},
		[5] = {{237, 248, 251}, {178, 226, 226}, {102, 194, 164}, {44, 162, 95}, {0, 109, 44}},
		[6] = {{237, 248, 251}, {204, 236, 230}, {153, 216, 201}, {102, 194, 164}, {44, 162, 95},
		      {0, 109, 44}},
		[7] = {{237, 248, 251}, {204, 236, 230}, {153, 216, 201}, {102, 194, 164}, {65, 174, 118},
		      {35, 139, 69}, {0, 88, 36}},
		[8] = {{247, 252, 253}, {229, 245, 249}, {204, 236, 230}, {153, 216, 201}, {102, 194, 164},
		      {65, 174, 118}, {35, 139, 69}, {0, 88, 36}},
		[9] = {{247, 252, 253}, {229, 245, 249}, {204, 236, 230}, {153, 216, 201}, {102, 194, 164},
		      {65, 174, 118}, {35, 139, 69}, {0, 109, 44}, {0, 68, 27}},
		[10] = {{247, 252, 253}, {233, 246, 249}, {215, 240, 238}, {187, 229, 220},
		       {147, 213, 196}, {108, 196, 168}, {78, 180, 133}, {52, 158, 96},
		       {27, 127, 61}, {0, 88, 36}},
		[11] = {{247, 252, 253}, {234, 247, 250}, {219, 241, 241}, {199, 234, 227},
		       {163, 220, 206}, {128, 205, 182}, {95, 190, 154}, {69, 176, 122},
		       {47, 152, 88}, {25, 123, 58}, {0, 88, 36}},
		[12] = {{247, 252, 253}, {235, 247, 250}, {222, 242, 243}, {206, 236, 231},
		       {176, 225, 214}, {144, 212, 194}, {111, 198, 170}, {86, 184, 142},
		       {62, 170, 113}, {44, 148, 82}, {23, 119, 56}, {0, 88, 36}},
		[13] = {{247, 252, 253}, {236, 247, 250}, {224, 243, 245}, {210, 238, 234},
		       {187, 229, 220}, {157, 217, 203}, {128, 205, 182}, {99, 192, 160},
		       {78, 180, 133}, {58, 165, 105}, {40, 144, 77}, {21, 117, 54}, {0, 88, 36}},
		[14] = {{247, 252, 253}, {237, 248, 250}, {227, 244, 247}, {213, 239, 237},
		       {196, 232, 225}, {168, 222, 209}, {141, 210, 192}, {114, 199, 172},
		       {91, 187, 149}, {71, 177, 125}, {54, 160, 98}, {37, 141, 72}, {19, 114, 53}, {0, 88, 36}},
		[15] = {{247, 252, 253}, {238, 248, 250}, {229, 244, 248}, {216, 240, 239},
		       {204, 235, 229}, {178, 226, 215}, {153, 216, 201}, {128, 205, 182},
		       {102, 193, 164}, {84, 184, 140}, {64, 173, 118}, {50, 156, 93},
		       {34, 139, 69}, {18, 112, 52}, {0, 88, 36}},
		[16] = {{247, 252, 253}, {238, 248, 251}, {230, 245, 249}, {219, 241, 241},
		       {207, 237, 232}, {187, 229, 220}, {163, 220, 206}, {139, 210, 191},
		       {116, 199, 173}, {95, 190, 154}, {78, 180, 133}, {61, 169, 111},
		       {47, 152, 88}, {32, 135, 66}, {17, 111, 51}, {0, 88, 36}},
		[17] = {{247, 252, 253}, {239, 248, 251}, {231, 245, 249}, {221, 242, 243},
		       {210, 238, 234}, {194, 232, 224}, {172, 223, 211}, {149, 214, 198},
		       {128, 205, 182}, {105, 195, 166}, {89, 186, 146}, {72, 177, 126},
		       {58, 165, 105}, {45, 149, 84}, {30, 132, 64}, {15, 109, 50}, {0, 88, 36}},
		[18] = {{247, 252, 253}, {239, 249, 251}, {232, 246, 249}, {223, 242, 244},
		       {212, 239, 236}, {201, 234, 228}, {180, 226, 216}, {159, 218, 204},
		       {138, 209, 189}, {117, 200, 174}, {98, 191, 158}, {83, 183, 139},
		       {67, 175, 120}, {55, 161, 100}, {42, 147, 80}, {29, 129, 62}, {14, 108, 49}, {0, 88, 36}},
		[19] = {{247, 252, 253}, {240, 249, 251}, {233, 246, 249}, {224, 243, 245},
		       {215, 240, 238}, {205, 236, 231}, {187, 229, 220}, {167, 221, 208},
		       {147, 213, 196}, {128, 205, 182}, {108, 196, 168}, {92, 188, 151},
		       {78, 180, 133}, {63, 172, 115}, {52, 158, 96}, {40, 144, 77},
		       {27, 127, 61}, {14, 107, 48}, {0, 88, 36}},
		[20] = {{247, 252, 253}, {240, 249, 251}, {233, 246, 250}, {226, 244, 246},
		       {217, 240, 239}, {207, 237, 232}, {193, 231, 223}, {174, 224, 213},
		       {155, 217, 202}, {137, 209, 189}, {118, 200, 175}, {100, 192, 161},
		       {87, 185, 144}, {73, 178, 127}, {60, 168, 110}, {50, 155, 92},
		       {38, 142, 74}, {26, 125, 60}, {13, 106, 47}, {0, 88, 36}},
		type = "sequential"
	},
	YlOrBr = {
		[2] = {{255, 247, 188},  {217, 95, 14}},
		[3] = {{255, 247, 188}, {254, 196, 79}, {217, 95, 14}},
		[4] = {{255, 255, 212}, {254, 217, 142}, {254, 153, 41}, {204, 76, 2}},
		[5] = {{255, 255, 212}, {254, 217, 142}, {254, 153, 41}, {217, 95, 14}, {153, 52, 4}},
		[6] = {{255, 255, 212}, {254, 227, 145}, {254, 196, 79}, {254, 153, 41}, {217, 95, 14},
		      {153, 52, 4}},
		[7] = {{255, 255, 212}, {254, 227, 145}, {254, 196, 79}, {254, 153, 41}, {236, 112, 20},
		      {204, 76, 2}, {140, 45, 4}},
		[8] = {{255, 255, 229}, {255, 247, 188}, {254, 227, 145}, {254, 196, 79}, {254, 153, 41},
		      {236, 112, 20}, {204, 76, 2}, {140, 45, 4}},
		[9] = {{255, 255, 229}, {255, 247, 188}, {254, 227, 145}, {254, 196, 79}, {254, 153, 41},
		      {236, 112, 20}, {204, 76, 2}, {153, 52, 4}, {102, 37, 6}},
		[10] = {{255, 255, 229}, {255, 248, 197}, {254, 235, 164}, {254, 216, 123},
		       {254, 191, 74}, {254, 157, 45}, {242, 125, 27}, {221, 96, 11},
		       {189, 68, 2}, {140, 44, 4}},
		[11] = {{255, 255, 229}, {255, 249, 200}, {254, 238, 170}, {254, 223, 138},
		       {254, 202, 92}, {254, 174, 60}, {250, 144, 36}, {237, 116, 22},
		       {216, 90, 8}, {184, 66, 3}, {140, 44, 4}},
		[12] = {{255, 255, 229}, {255, 249, 202}, {255, 241, 176}, {254, 228, 148},
		       {254, 210, 109}, {254, 188, 72}, {254, 161, 48}, {246, 134, 31},
		       {233, 108, 18}, {212, 85, 6}, {180, 64, 3}, {140, 44, 4}},
		[13] = {{255, 255, 229}, {255, 250, 205}, {255, 243, 180}, {254, 231, 155},
		       {254, 216, 123}, {254, 198, 84}, {254, 174, 60}, {252, 149, 39},
		       {242, 125, 27}, {227, 103, 15}, {209, 82, 4}, {176, 62, 3}, {140, 44, 4}},
		[14] = {{255, 255, 229}, {255, 250, 206}, {255, 245, 184}, {254, 234, 161},
		       {254, 222, 135}, {254, 205, 100}, {254, 186, 70}, {254, 163, 50},
		       {248, 140, 34}, {238, 118, 23}, {223, 98, 12}, {206, 78, 3},
		       {173, 61, 3}, {140, 44, 4}},
		[15] = {{255, 255, 229}, {255, 250, 208}, {255, 247, 187}, {254, 236, 166},
		       {254, 227, 145}, {254, 211, 112}, {254, 196, 78}, {254, 174, 60},
		       {254, 153, 40}, {245, 132, 30}, {235, 112, 19}, {219, 94, 10},
		       {204, 76, 1}, {171, 60, 3}, {140, 44, 4}},
		[16] = {{255, 255, 229}, {255, 251, 209}, {255, 247, 190}, {254, 238, 170},
		       {254, 229, 150}, {254, 216, 123}, {254, 202, 92}, {254, 184, 69},
		       {254, 164, 51}, {250, 144, 36}, {242, 125, 27}, {231, 107, 17},
		       {216, 90, 8}, {199, 73, 2}, {169, 59, 3}, {140, 44, 4}},
		[17] = {{255, 255, 229}, {255, 251, 211}, {255, 247, 193}, {255, 240, 174},
		       {254, 231, 155}, {254, 221, 133}, {254, 207, 104}, {254, 193, 76},
		       {254, 174, 60}, {254, 155, 43}, {247, 137, 33}, {239, 119, 24},
		       {227, 103, 15}, {213, 87, 6}, {195, 72, 2}, {167, 58, 3}, {140, 44, 4}},
		[18] = {{255, 255, 229}, {255, 251, 212}, {255, 248, 195}, {255, 242, 177},
		       {254, 234, 160}, {254, 225, 141}, {254, 212, 114}, {254, 199, 87},
		       {254, 183, 68}, {254, 165, 52}, {251, 148, 38}, {244, 131, 30},
		       {237, 114, 21}, {224, 99, 13}, {211, 84, 5}, {192, 70, 2},
		       {165, 57, 3}, {140, 44, 4}},
		[19] = {{255, 255, 229}, {255, 251, 213}, {255, 248, 197}, {255, 243, 180},
		       {254, 235, 164}, {254, 228, 147}, {254, 216, 123}, {254, 204, 98},
		       {254, 191, 74}, {254, 174, 60}, {254, 157, 45}, {249, 141, 35},
		       {242, 125, 27}, {234, 110, 19}, {221, 96, 11}, {209, 82, 4},
		       {189, 68, 2}, {164, 56, 3}, {140, 44, 4}},
		[20] = {{255, 255, 229}, {255, 252, 213}, {255, 249, 198}, {255, 244, 183},
		       {254, 237, 167}, {254, 230, 151}, {254, 220, 131}, {254, 209, 107},
		       {254, 197, 82}, {254, 182, 67}, {254, 166, 53}, {253, 150, 39},
		       {246, 136, 32}, {239, 120, 24}, {230, 106, 17}, {219, 93, 10},
		       {207, 79, 3}, {186, 67, 2}, {163, 56, 3}, {140, 44, 4}},
		type = "sequential"
	},
	YlGn = {
		[2] = {{247, 252, 185}, {49, 163, 84}},
		[3] = {{247, 252, 185}, {173, 221, 142}, {49, 163, 84}},
		[4] = {{255, 255, 204}, {194, 230, 153}, {120, 198, 121}, {35, 132, 67}},
		[5] = {{255, 255, 204}, {194, 230, 153}, {120, 198, 121}, {49, 163, 84}, {0, 104, 55}},
		[6] = {{255, 255, 204}, {217, 240, 163}, {173, 221, 142}, {120, 198, 121}, {49, 163, 84},
		      {0, 104, 55}},
		[7] = {{255, 255, 204}, {217, 240, 163}, {173, 221, 142}, {120, 198, 121}, {65, 171, 93},
		      {35, 132, 67}, {0, 90, 50}},
		[8] = {{255, 255, 229}, {247, 252, 185}, {217, 240, 163}, {173, 221, 142}, {120, 198, 121},
		      {65, 171, 93}, {35, 132, 67}, {0, 90, 50}},
		[9] = {{255, 255, 229}, {247, 252, 185}, {217, 240, 163}, {173, 221, 142}, {120, 198, 121},
		      {65, 171, 93}, {35, 132, 67}, {0, 104, 55}, {0, 69, 41}},
		[10] = {{255, 255, 229}, {248, 252, 194}, {230, 245, 172}, {202, 233, 155},
		       {167, 218, 139}, {126, 200, 123}, {84, 179, 102}, {51, 153, 81},
		       {28, 122, 63}, {0, 89, 50}},
		[11] = {{255, 255, 229}, {249, 252, 198}, {235, 247, 176}, {212, 238, 160},
		       {181, 224, 146}, {147, 209, 131}, {109, 192, 115}, {71, 173, 95},
		       {47, 147, 77}, {25, 119, 61}, {0, 89, 50}},
		[12] = {{255, 255, 229}, {250, 253, 201}, {238, 248, 178}, {219, 241, 164},
		       {193, 229, 151}, {163, 216, 138}, {130, 202, 124}, {96, 185, 108},
		       {62, 167, 90}, {43, 142, 73}, {23, 116, 60}, {0, 89, 50}},
		[13] = {{255, 255, 229}, {250, 253, 203}, {242, 250, 181}, {224, 243, 168},
		       {202, 233, 155}, {176, 222, 143}, {147, 209, 131}, {115, 195, 118},
		       {84, 179, 102}, {57, 161, 86}, {40, 138, 71}, {21, 114, 59}, {0, 89, 50}},
		[14] = {{255, 255, 229}, {251, 253, 205}, {244, 251, 183}, {228, 244, 171},
		       {210, 237, 159}, {186, 226, 148}, {161, 215, 137}, {132, 203, 125},
		       {104, 189, 112}, {74, 175, 97}, {53, 155, 82}, {37, 134, 68},
		       {20, 112, 59}, {0, 89, 50}},
		[15] = {{255, 255, 229}, {251, 253, 207}, {247, 252, 184}, {232, 246, 173},
		       {216, 240, 163}, {195, 230, 152}, {172, 221, 141}, {147, 209, 131},
		       {120, 197, 121}, {94, 184, 106}, {64, 171, 93}, {50, 151, 79},
		       {34, 132, 67}, {19, 110, 58}, {0, 89, 50}},
		[16] = {{255, 255, 229}, {251, 253, 208}, {247, 252, 187}, {235, 247, 176},
		       {221, 241, 165}, {202, 233, 155}, {181, 224, 146}, {159, 214, 136},
		       {134, 204, 126}, {109, 192, 115}, {84, 179, 102}, {61, 165, 89},
		       {47, 147, 77}, {32, 129, 65}, {17, 109, 57}, {0, 89, 50}},
		[17] = {{255, 255, 229}, {251, 253, 209}, {248, 252, 190}, {237, 248, 178},
		       {224, 243, 168}, {208, 236, 159}, {189, 228, 149}, {169, 219, 140},
		       {147, 209, 131}, {123, 199, 122}, {100, 187, 110}, {76, 176, 98},
		       {57, 161, 86}, {44, 143, 74}, {31, 126, 64}, {16, 108, 57}, {0, 89, 50}},
		[18] = {{255, 255, 229}, {252, 253, 210}, {248, 252, 192}, {239, 249, 179},
		       {227, 244, 170}, {214, 238, 161}, {196, 231, 153}, {178, 223, 144},
		       {157, 214, 135}, {136, 204, 127}, {114, 194, 117}, {92, 183, 106},
		       {68, 172, 94}, {54, 157, 83}, {42, 141, 72}, {29, 124, 63},
		       {15, 106, 56}, {0, 89, 50}},
		[19] = {{255, 255, 229}, {252, 253, 211}, {248, 252, 194}, {242, 250, 181},
		       {230, 245, 172}, {218, 240, 164}, {202, 233, 155}, {185, 226, 147},
		       {167, 218, 139}, {147, 209, 131}, {126, 200, 123}, {105, 190, 113},
		       {84, 179, 102}, {63, 168, 91}, {51, 153, 81}, {40, 138, 71},
		       {28, 122, 63}, {15, 105, 56}, {0, 89, 50}},
		[20] = {{255, 255, 229}, {252, 253, 212}, {249, 252, 196}, {243, 250, 182},
		       {232, 246, 174}, {221, 241, 166}, {207, 236, 158}, {191, 229, 150},
		       {175, 222, 143}, {156, 213, 135}, {137, 205, 127}, {117, 196, 119},
		       {98, 186, 109}, {77, 176, 98}, {60, 164, 88}, {49, 150, 79},
		       {38, 136, 69}, {26, 120, 62}, {14, 105, 56}, {0, 89, 50}},
		type = "sequential"
	},
	Reds = {
		[2] = {{254, 224, 210}, {222, 45, 38}},
		[3] = {{254, 224, 210}, {252, 146, 114}, {222, 45, 38}},
		[4] = {{254, 229, 217}, {252, 174, 145}, {251, 106, 74}, {203, 24, 29}},
		[5] = {{254, 229, 217}, {252, 174, 145}, {251, 106, 74}, {222, 45, 38}, {165, 15, 21}},
		[6] = {{254, 229, 217}, {252, 187, 161}, {252, 146, 114}, {251, 106, 74}, {222, 45, 38},
		      {165, 15, 21}},
		[7] = {{254, 229, 217}, {252, 187, 161}, {252, 146, 114}, {251, 106, 74}, {239, 59, 44},
		      {203, 24, 29}, {153, 0, 13}},
		[8] = {{255, 245, 240}, {254, 224, 210}, {252, 187, 161}, {252, 146, 114}, {251, 106, 74},
		      {239, 59, 44}, {203, 24, 29}, {153, 0, 13}},
		[9] = {{255, 245, 240}, {254, 224, 210}, {252, 187, 161}, {252, 146, 114}, {251, 106, 74},
		      {239, 59, 44}, {203, 24, 29}, {165, 15, 21}, {103, 0, 13}},
		[10] = {{255, 244, 240}, {254, 228, 216}, {253, 203, 182}, {252, 173, 145},
		       {252, 141, 109}, {251, 110, 78}, {243,76, 53}, {222, 45, 37},
		       {191, 18, 25}, {153, 0, 12}},
		[11] = {{255, 244, 240}, {254, 230, 218}, {253, 209, 190}, {252, 182, 156},
		       {252, 154, 123}, {252, 126, 93}, {248, 97, 67}, {240, 64, 46}, {217, 39, 34},
		       {187, 17, 24}, {153, 0, 12}},
		[12] = {{255, 244, 240}, {254, 231, 220}, {254, 213, 196}, {252, 190, 165},
		       {252, 164, 135}, {252, 139, 106}, {251, 113, 81}, {245, 86, 60},
		       {235, 56, 42}, {212, 35, 33}, {184, 15, 23}, {153, 0, 12}},
		[13] = {{255, 244, 240}, {254, 232, 222}, {254, 217, 201}, {253, 196, 173},
		       {252, 173, 145}, {252, 149, 117}, {252, 126, 93}, {250, 102, 71},
		       {243, 76, 53}, {229, 51, 40}, {208, 31, 31}, {181, 14, 22}, {153, 0, 12}},
		[14] = {{255, 244, 240}, {254, 233, 223}, {254, 221, 206}, {253, 201, 179},
		       {252, 180, 153}, {252, 158, 128}, {252, 137, 104}, {251, 115, 83},
		       {247, 93, 64}, {240, 67, 48}, {225, 46, 38}, {205, 27, 30},
		       {179, 13, 21}, {153, 0, 12}},
		[15] = {{255, 244, 240}, {254, 234, 224}, {254, 223, 210}, {253, 205, 185},
		       {252, 186, 160}, {252, 166, 137}, {252, 146, 114}, {252, 126, 93},
		       {250, 106, 74}, {245, 84, 58}, {238, 58, 44}, {220, 43, 36},
		       {203, 24, 29}, {177, 12, 20}, {153, 0, 12}},
		[16] = {{255, 244, 240}, {254, 235, 225}, {254, 225, 211}, {253, 209, 190},
		       {252, 191, 167}, {252, 173, 145}, {252, 154, 123}, {252, 135, 103},
		       {251, 117, 84}, {248, 97, 67}, {243, 76, 53}, {234, 54, 41},
		       {217, 39, 34}, {199, 22, 27}, {176, 11, 20}, {153, 0, 12}},
		[17] = {{255, 244, 240}, {254, 235, 226}, {254, 226, 213}, {253, 212, 194},
		       {253, 196, 173}, {252, 179, 152}, {252, 161, 131}, {252, 143, 111},
		       {252, 126, 93}, {251, 108, 76}, {246, 90, 62}, {241, 69, 49},
		       {229, 51, 40}, {214, 36, 33}, {196, 21, 26}, {174, 10, 19}, {153, 0, 12}},
		[18] = {{255, 244, 240}, {254, 236, 227}, {254, 227, 215}, {254, 215, 198},
		       {253, 200, 178}, {252, 184, 158}, {252, 167, 138}, {252, 150, 119},
		       {252, 134, 102}, {251, 118, 85}, {249, 101, 70}, {244, 83, 58},
		       {239, 62, 45}, {226, 47, 38}, {211, 33, 32}, {193, 20, 26},
		       {173, 9, 19}, {153, 0, 12}},
		[19] = {{255, 244, 240}, {254, 236, 228}, {254, 228, 216}, {254, 217, 201},
		       {253, 203, 182}, {252, 189, 163}, {252, 173, 145}, {252, 157, 126},
		       {252, 141, 109}, {252, 126, 93}, {251, 110, 78}, {247, 94, 65},
		       {243, 76, 53}, {236, 57, 43}, {222, 45, 37}, {208, 31, 31}, {191, 18, 25},
		       {172, 9, 19}, {153, 0, 12}},
		[20] = {{255, 244, 240}, {254, 237, 228}, {254, 229, 217}, {254, 220, 204},
		       {253, 206, 186}, {252, 192, 168}, {252, 178, 150}, {252, 163, 133},
		       {252, 148, 116}, {252, 133, 101}, {251, 119, 86}, {250, 103, 72},
		       {246, 88, 61}, {241, 70, 50}, {233, 54, 41}, {219, 42, 35},
		       {206, 28, 30}, {189, 17, 24}, {171, 8, 18}, {153, 0, 12}},
		type = "sequential"
	},
	RdPu = {
		[2] = {{253, 224, 221}, {197, 27, 138}},
		[3] = {{253, 224, 221}, {250, 159, 181}, {197, 27, 138}},
		[4] = {{254, 235, 226}, {251, 180, 185}, {247, 104, 161}, {174, 1, 126}},
		[5] = {{254, 235, 226}, {251, 180, 185}, {247, 104, 161}, {197, 27, 138}, {122, 1, 119}},
		[6] = {{254, 235, 226}, {252, 197, 192}, {250, 159, 181}, {247, 104, 161}, {197, 27, 138},
		      {122, 1, 119}},
		[7] = {{254, 235, 226}, {252, 197, 192}, {250, 159, 181}, {247, 104, 161}, {221, 52, 151},
		      {174, 1, 126}, {122, 1, 119}},
		[8] = {{255, 247, 243}, {253, 224, 221}, {252, 197, 192}, {250, 159, 181}, {247, 104, 161},
		      {221, 52, 151}, {174, 1, 126}, {122, 1, 119}},
		[9] = {{255, 247, 243}, {253, 224, 221}, {252, 197, 192}, {250, 159, 181}, {247, 104, 161},
		      {221, 52, 151}, {174, 1, 126}, {122, 1, 119}, {73, 0, 106}},
		[10] = {{255, 247, 242}, {253, 229, 225}, {252, 209, 204}, {251, 184, 188},
		       {249, 153, 178}, {247, 110, 163}, {229, 71, 154}, {199, 34, 139},
		       {162, 0, 124}, {121, 0, 119}},
		[11] = {{255, 247, 242}, {253, 230, 227}, {252, 213, 209}, {251, 193, 190},
		       {250, 166, 183}, {249, 132, 170}, {241, 94, 159}, {223, 58, 152},
		       {192, 27, 135}, {158, 0, 123}, {121, 0, 119}},
		[12] = {{255, 247, 242}, {253, 232, 228}, {252, 216, 213}, {252, 199, 194},
		       {251, 176, 186}, {249, 149, 177}, {247, 114, 164}, {235, 82, 156},
		       {216, 48, 148}, {186, 20, 132}, {155, 0, 123}, {121, 0, 119}},
		[13] = {{255, 247, 242}, {253, 233, 230}, {252, 219, 216}, {252, 203, 199},
		       {251, 184, 188}, {250, 162, 181}, {249, 132, 170}, {244, 100, 160},
		       {229, 71, 154}, {209, 42, 144}, {181, 14, 130}, {152, 0, 123}, {121, 0, 119}},
		[14] = {{255, 247, 242}, {254, 234, 231}, {253, 221, 218}, {252, 207, 203},
		       {251, 191, 190}, {250, 170, 184}, {249, 147, 176}, {248, 117, 165},
		       {239, 89, 157}, {225, 61, 152}, {202, 36, 141}, {177, 6, 127},
		       {150, 0, 122}, {121, 0, 119}},
		[15] = {{255, 247, 242}, {254, 235, 231}, {253, 223, 221}, {252, 210, 206},
		       {252, 197, 191}, {251, 178, 186}, {249, 159, 180}, {249, 132, 170},
		       {247, 103, 160}, {234, 80, 156}, {221, 51, 151}, {197, 31, 138},
		       {173, 0, 126}, {148, 0, 122}, {121, 0, 119}},
		[16] = {{255, 247, 242}, {254, 236, 232}, {253, 225, 222}, {252, 213, 209},
		       {252, 200, 195}, {251, 184, 188}, {250, 166, 183}, {249, 145, 175},
		       {248, 119, 166}, {241, 94, 159}, {229, 71, 154}, {214, 46, 147},
		       {192, 27, 135}, {170, 0, 125}, {146, 0, 122}, {121, 0, 119}},
		[17] = {{255, 247, 242}, {254, 236, 233}, {253, 226, 223}, {252, 215, 211},
		       {252, 203, 199}, {251, 190, 189}, {251, 173, 185}, {249, 155, 179},
		       {249, 132, 170}, {247, 107, 162}, {237, 86, 157}, {225, 63, 152},
		       {209, 42, 144}, {188, 22, 133}, {167, 0, 125}, {144, 0, 122}, {121, 0, 119}},
		[18] = {{255, 247, 242}, {254, 237, 233}, {253, 228, 224}, {252, 217, 214},
		       {252, 206, 202}, {251, 194, 191}, {251, 179, 186}, {250, 163, 182},
		       {249, 143, 175}, {248, 121, 166}, {243, 98, 159}, {233, 78, 155},
		       {222, 55, 151}, {204, 38, 142}, {184, 18, 131}, {164, 0, 124},
		       {143, 0, 121}, {121, 0, 119}},
		[19] = {{255, 247, 242}, {254, 238, 234}, {253, 229, 225}, {252, 219, 216},
		       {252, 209, 204}, {252, 198, 193}, {251, 184, 188}, {250, 169, 184},
		       {249, 153, 178}, {249, 132, 170}, {247, 110, 163}, {239, 91, 158},
		       {229, 71, 154}, {218, 49, 149}, {199, 34, 139}, {181, 14, 130},
		       {162, 0, 124}, {142, 0, 121}, {121, 0, 119}},
		[20] = {{255, 247, 242}, {254, 238, 234}, {253, 230, 226}, {253, 221, 217},
		       {252, 211, 207}, {252, 201, 196}, {251, 189, 189}, {251, 175, 185},
		       {250, 161, 181}, {249, 142, 174}, {248, 122, 167}, {245, 101, 160},
		       {236, 84, 156}, {226, 64, 153}, {213, 46, 147}, {196, 30, 137},
		       {178, 9, 128}, {160, 0, 124}, {141, 0, 121}, {121, 0, 119}},
		type = "sequential"
	},
	Greens = {
		[2] = {{229, 245, 224}, {49, 163, 84}},
		[3] = {{229, 245, 224}, {161, 217, 155}, {49, 163, 84}},
		[4] = {{237, 248, 233}, {186, 228, 179}, {116, 196, 118}, {35, 139, 69}},
		[5] = {{237, 248, 233}, {186, 228, 179}, {116, 196, 118}, {49, 163, 84}, {0, 109, 44}},
		[6] = {{237, 248, 233}, {199, 233, 192}, {161, 217, 155}, {116, 196, 118}, {49, 163, 84},
		      {0, 109, 44}},
		[7] = {{237, 248, 233}, {199, 233, 192}, {161, 217, 155}, {116, 196, 118}, {65, 171, 93},
		      {35, 139, 69}, {0, 90, 50}},
		[8] = {{247, 252, 245}, {229, 245, 224}, {199, 233, 192}, {161, 217, 155}, {116, 196, 118},
		      {65, 171, 93}, {35, 139, 69}, {0, 90, 50}},
		[9] = {{247, 252, 245}, {229, 245, 224}, {199, 233, 192}, {161, 217, 155}, {116, 196, 118},
		      {65, 171, 93}, {35, 139, 69}, {0, 109, 44}, {0, 68, 27}},
		[10] = {{247, 252, 244}, {233, 246, 228}, {212, 238, 206}, {186, 227, 179},
		       {156, 214, 150}, {121, 198, 122}, {83, 179, 101}, {52, 156, 82},
		       {28, 127, 64}, {0, 89, 50}},
		[11] = {{247, 252, 244}, {234, 247, 230}, {217, 240, 211}, {195, 231, 188},
		       {168, 220, 162}, {138, 206, 136}, {106, 190, 112}, {70, 173, 95},
		       {47, 151, 78}, {25, 123, 63}, {0, 89, 50}},
		[12] = {{247, 252, 244}, {235, 247, 231}, {220, 241, 215}, {201, 234, 194},
		       {178, 224, 171}, {153, 213, 148}, {124, 199, 124}, {94, 184, 106},
		       {62, 168, 90}, {43, 147, 75}, {23, 120, 62}, {0, 89, 50}},
		[13] = {{247, 252, 244}, {236, 247, 232}, {224, 243, 218}, {206, 236, 199},
		       {186, 227, 179}, {164, 218, 158}, {138, 206, 136}, {112, 193, 115},
		       {83, 179, 101}, {57, 162, 86}, {40, 144, 72}, {21, 118, 61}, {0, 89, 50}},
		[14] = {{247, 252, 244}, {237, 248, 233}, {226, 244, 221}, {210, 237, 204},
		       {193, 230, 186}, {172, 221, 166}, {150, 212, 146}, {126, 200, 126},
		       {101, 188, 110}, {73, 174, 96}, {53, 158, 83}, {37, 141, 70}, {20, 115, 60}, {0, 89, 50}},
		[15] = {{247, 252, 244}, {238, 248, 234}, {229, 244, 223}, {214, 239, 207},
		       {198, 233, 191}, {180, 225, 173}, {160, 216, 154}, {138, 206, 136},
		       {115, 196, 118}, {91, 183, 105}, {64, 171, 93}, {50, 154, 80}, {34, 139, 69},
		       {18, 114, 59}, {0, 89, 50}},
		[16] = {{247, 252, 244}, {238, 248, 235}, {230, 245, 225}, {217, 240, 211},
		       {203, 234, 196}, {186, 227, 179}, {168, 220, 162}, {149, 211, 145},
		       {128, 201, 127}, {106, 190, 112}, {83, 179, 101}, {61, 166, 89},
		       {47, 151, 78}, {32, 135, 67}, {17, 112, 58}, {0, 89, 50}},
		[17] = {{247, 252, 244}, {239, 248, 235}, {231, 245, 226}, {219, 241, 213},
		       {206, 236, 199}, {191, 230, 185}, {175, 223, 168}, {158, 215, 152},
		       {138, 206, 136}, {118, 197, 120}, {98, 186, 108}, {75, 175, 97},
		       {57, 162, 86}, {44, 148, 76}, {31, 132, 66}, {16, 110, 58}, {0, 89, 50}},
		[18] = {{247, 252, 244}, {239, 249, 236}, {232, 246, 227}, {221, 242, 216},
		       {209, 237, 203}, {196, 232, 189}, {181, 225, 174}, {165, 218, 159},
		       {148, 210, 144}, {129, 202, 128}, {110, 193, 115}, {90, 182, 104},
		       {68, 172, 94}, {54, 159, 84}, {42, 146, 74}, {29, 130, 65}, {15, 109, 57}, {0, 89, 50}},
		[19] = {{247, 252, 244}, {240, 249, 236}, {233, 246, 228}, {224, 243, 218},
		       {212, 238, 206}, {200, 233, 193}, {186, 227, 179}, {171, 221, 165},
		       {156, 214, 150}, {138, 206, 136}, {121, 198, 122}, {102, 189, 110},
		       {83, 179, 101}, {63, 169, 91}, {52, 156, 82}, {40, 144, 72},
		       {28, 127, 64}, {14, 108, 57}, {0, 89, 50}},
		[20] = {{247, 252, 244}, {240, 249, 237}, {233, 246, 229}, {225, 243, 220},
		       {214, 239, 208}, {203, 234, 197}, {191, 229, 184}, {177, 223, 170},
		       {163, 217, 156}, {147, 210, 143}, {130, 202, 129}, {113, 194, 116},
		       {95, 185, 107}, {76, 176, 98}, {60, 165, 89}, {49, 154, 80},
		       {38, 142, 71}, {26, 125, 63}, {13, 107, 56}, {0, 89, 50}},
		type = "sequential"
	},
	YlGnBu = {
		[2] = {{237, 248, 177}, {44, 127, 184}},
		[3] = {{237, 248, 177}, {127, 205, 187}, {44, 127, 184}},
		[4] = {{255, 255, 204}, {161, 218, 180}, {65, 182, 196}, {34, 94, 168}},
		[5] = {{255, 255, 204}, {161, 218, 180}, {65, 182, 196}, {44, 127, 184}, {37, 52, 148}},
		[6] = {{255, 255, 204}, {199, 233, 180}, {127, 205, 187}, {65, 182, 196}, {44, 127, 184},
		      {37, 52, 148}},
		[7] = {{255, 255, 204}, {199, 233, 180}, {127, 205, 187}, {65, 182, 196}, {29, 145, 192},
		      {34, 94, 168}, {12, 44, 132}},
		[8] = {{255, 255, 217}, {237, 248, 177}, {199, 233, 180}, {127, 205, 187}, {65, 182, 196},
		      {29, 145, 192}, {34, 94, 168}, {12, 44, 132}},
		[9] = {{255, 255, 217}, {237, 248, 177}, {199, 233, 180}, {127, 205, 187}, {65, 182, 196},
		      {29, 145, 192}, {34, 94, 168}, {37, 52, 148}, {8, 29, 88}},
		[10] = {{255, 255, 216}, {241, 249, 185}, {216, 239, 178}, {176, 223, 182}, {121, 202, 188},
		       {74, 184, 195}, {44, 157, 193}, {34, 122, 181}, {31, 82, 159}, {12, 44, 132}},
		[11] = {{255, 255, 216}, {242, 250, 189}, {222, 242, 178}, {192, 230, 180}, {142, 210, 185},
		       {100, 193, 191}, {59, 174, 195}, {34, 148, 192}, {35, 114, 177}, {29, 78, 157}, {12, 44, 132}},
		[12] = {{255, 255, 216}, {243, 250, 191}, {226, 243, 177}, {202, 234, 179}, {161, 217, 184},
		       {117, 200, 188}, {79, 186, 194}, {52, 164, 194}, {30, 140, 189}, {35, 107, 174}, {28, 75, 154}, {12, 44, 132}},
		[13] = {{255, 255, 216}, {244, 250, 193}, {230, 245, 177}, {208, 236, 179}, {176, 223, 182},
		       {133, 207, 186}, {100, 193, 191}, {62, 178, 195}, {44, 157, 193}, {33, 132, 186}, {34, 102, 172}, {27, 72, 152}, {12, 44, 132}},
		[14] = {{255, 255, 216}, {245, 251, 195}, {234, 246, 177}, {213, 238, 178}, {188, 228, 181}, {151, 213, 185},
		       {115, 199, 189}, {83, 187, 194}, {56, 170, 194}, {37, 150, 192}, {34, 125, 182}, {34, 97, 169}, {26, 70, 151}, {12, 44, 132}},
		[15] = {{255, 255, 216}, {246, 251, 197}, {236, 248, 177}, {218, 240, 178}, {198, 233, 179},
		       {165, 218, 183}, {127, 204, 186}, {100, 193, 191}, {64, 182, 196}, {50, 163, 194},
		       {29, 145, 191}, {35, 119, 180}, {33, 94, 167}, {26, 68, 149}, {12, 44, 132}},
		[16] = {{255, 255, 216}, {246, 251, 198}, {238, 248, 179}, {222, 242, 178}, {204, 235, 179},
		       {176, 223, 182}, {142, 210, 185}, {113, 198, 189}, {85, 188, 193}, {59, 174, 195},
		       {44, 157, 193}, {31, 138, 188}, {35, 114, 177}, {33, 90, 165}, {25, 67, 148}, {12, 44, 132}},
		[17] = {{255, 255, 216}, {247, 251, 199}, {239, 248, 182}, {225, 243, 177}, {208, 236, 179},
		       {186, 227, 181}, {156, 215, 184}, {123, 203, 187}, {100, 193, 191}, {70, 183, 195}, {54, 167, 194},
		       {38, 151, 192}, {33, 132, 186}, {35, 109, 175}, {32, 87, 163}, {24, 65, 147}, {12, 44, 132}},
		[18] = {{255, 255, 216}, {247, 252, 200}, {240, 249, 184}, {228, 244, 177}, {212, 238, 178}, {195, 231, 180},
		       {167, 219, 183}, {136, 208, 186}, {111, 198, 189}, {87, 188, 193}, {61, 177, 195}, {49, 162, 193},
		       {32, 147, 192}, {34, 126, 183}, {35, 105, 173}, {31, 85, 161}, {24, 64, 146}, {12, 44, 132}},
		[19] = {{255, 255, 216}, {248, 252, 201}, {241, 249, 185}, {230, 245, 177}, {216, 239, 178}, {201, 233, 179},
		       {176, 223, 182}, {148, 212, 185}, {121, 202, 188}, {100, 193, 191}, {74, 184, 195}, {57, 171, 194},
		       {44, 157, 193}, {30, 142, 190}, {34, 122, 181}, {34, 102, 172}, {31, 82, 159},
		       {23, 63, 145}, {12, 44, 132}},
		[20] = {{255, 255, 216}, {248, 252, 202}, {241, 249, 187}, {233, 246, 177}, {219, 240, 178}, {205, 235, 179},
		       {185, 227, 181}, {159, 216, 184}, {131, 206, 186}, {110, 197, 189}, {88, 189, 193}, {63, 180, 195},
		       {53, 166, 194}, {39, 152, 192}, {31, 136, 188}, {35, 117, 179}, {34, 99, 170},
		       {30, 80, 158}, {23, 62, 145}, {12, 44, 132}},
		type = "sequential"
	},
	Purples = {
		[2] = {{239, 237, 245}, {117, 107, 177}},
		[3] = {{239, 237, 245}, {188, 189, 220}, {117, 107, 177}},
		[4] = {{242, 240, 247}, {203, 201, 226}, {158, 154, 200}, {106, 81, 163}},
		[5] = {{242, 240, 247}, {203, 201, 226}, {158, 154, 200}, {117, 107, 177}, {84, 39, 143}},
		[6] = {{242, 240, 247}, {218, 218, 235}, {188, 189, 220}, {158, 154, 200}, {117, 107, 177},
		      {84, 39, 143}},
		[7] = {{242, 240, 247}, {218, 218, 235}, {188, 189, 220}, {158, 154, 200}, {128, 125, 186},
		      {106, 81, 163}, {74, 20, 134}},
		[8] = {{252, 251, 253}, {239, 237, 245}, {218, 218, 235}, {188, 189, 220}, {158, 154, 200},
		      {128, 125, 186}, {106, 81, 163}, {74, 20, 134}},
		[9] = {{252, 251, 253}, {239, 237, 245}, {218, 218, 235}, {188, 189, 220}, {158, 154, 200},
		      {128, 125, 186}, {106, 81, 163}, {84, 39, 143}, {63, 0, 125}},
		[10] = {{252, 250, 253}, {241, 240, 246}, {227, 226, 239}, {207, 208, 229}, {184, 185, 217},
			   {161, 157, 202}, {138, 134, 190}, {118, 105, 175}, {99, 68, 156}, {74, 19, 133}},
		[11] = {{252, 250, 253}, {242, 241, 247}, {230, 229, 241}, {214, 215, 233}, {193, 194, 223},
			   {172, 171, 209}, {152, 148, 197}, {131, 127, 187}, {115, 98, 172}, {97, 64, 154}, {74, 19, 133}},
		[12] = {{252, 250, 253}, {243, 242, 247}, {233, 231, 242}, {219, 219, 235}, {201, 202, 226},
			   {182, 182, 216}, {163, 160, 203}, {144, 140, 193}, {126, 120, 183}, {112, 92, 169},
			   {95, 60, 152}, {74, 19, 133}},
		[13] = {{252, 250, 253}, {244, 242, 248}, {235, 233, 243}, {223, 222, 237}, {207, 208, 229},
			   {190, 191, 221}, {172, 171, 209}, {155, 151, 198}, {138, 134, 190}, {122, 113, 180},
			   {109, 88, 166}, {93, 57, 150}, {74, 19, 133}},
		[14] = {{252, 250, 253}, {244, 243, 248}, {237, 235, 244}, {226, 225, 238}, {213, 213, 232},
			   {197, 197, 224}, {181, 180, 215}, {164, 161, 204}, {148, 144, 195}, {132, 129, 188},
			   {119, 108, 177}, {107, 84, 164}, {91, 55, 149}, {74, 19, 133}},
		[15] = {{252, 250, 253}, {245, 243, 248}, {238, 236, 244}, {228, 227, 239}, {217, 217, 235},
			   {202, 203, 227}, {187, 189, 220}, {172, 171, 209}, {158, 153, 199}, {143, 139, 193},
			   {127, 125, 185}, {117, 102, 174}, {106, 81, 163}, {90, 52, 148}, {74, 19, 133}},
		[16] = {{252, 250, 253}, {245, 244, 249}, {239, 237, 245}, {230, 229, 241}, {220, 220, 236},
			   {207, 208, 229}, {193, 194, 223}, {179, 179, 214}, {165, 163, 205}, {152, 148, 197},
			   {138, 134, 190}, {125, 119, 182}, {115, 98, 172}, {104, 77, 161}, {89, 50, 147}, {74, 19, 133}},
		[17] = {{252, 250, 253}, {246, 244, 249}, {240, 238, 245}, {232, 231, 241}, {223, 222, 237},
			   {212, 212, 232}, {199, 199, 225}, {186, 186, 218}, {172, 171, 209}, {159, 156, 201},
			   {146, 142, 194}, {133, 130, 188}, {122, 113, 180}, {113, 94, 170}, {102, 74, 159},
			   {88, 49, 146}, {74, 19, 133}},
		[18] = {{252, 250, 253}, {246, 245, 249}, {241, 239, 246}, {234, 232, 242}, {225, 224, 238},
			   {216, 216, 234}, {203, 204, 227}, {191, 192, 221}, {179, 178, 214}, {166, 164, 205},
			   {154, 150, 198}, {142, 138, 192}, {129, 126, 186}, {120, 109, 177}, {111, 91, 168},
			   {100, 71, 157}, {87, 47, 145}, {74, 19, 133}},
		[19] = {{252, 250, 253}, {246, 245, 249}, {241, 240, 246}, {235, 233, 243}, {227, 226, 239},
			   {219, 219, 235}, {207, 208, 229}, {196, 196, 224}, {184, 185, 217}, {172, 171, 209},
			   {161, 157, 202}, {149, 145, 196}, {138, 134, 190}, {126, 122, 184}, {118, 105, 175},
			   {109, 88, 166}, {99, 68, 156}, {87, 46, 145}, {74, 19, 133}},
		[20] = {{252, 250, 253}, {247, 245, 250}, {242, 240, 247}, {236, 234, 243}, {229, 227, 240},
			   {221, 220, 236}, {211, 211, 231}, {200, 201, 226}, {189, 190, 220}, {178, 177, 213},
			   {167, 164, 206}, {156, 152, 199}, {145, 141, 194}, {134, 131, 188}, {124, 118, 182},
			   {116, 101, 173}, {108, 85, 165}, {98, 66, 155}, {86, 45, 144}, {74, 19, 133}},
		type = "sequential"
	},
	GnBu = {
		[2] = {{224, 243, 219}, {67, 162, 202}},
		[3] = {{224, 243, 219}, {168, 221, 181}, {67, 162, 202}},
		[4] = {{240, 249, 232}, {186, 228, 188}, {123, 204, 196}, {43, 140, 190}},
		[5] = {{240, 249, 232}, {186, 228, 188}, {123, 204, 196}, {67, 162, 202}, {8, 104, 172}},
		[6] = {{240, 249, 232}, {204, 235, 197}, {168, 221, 181}, {123, 204, 196}, {67, 162, 202},
		      {8, 104, 172}},
		[7] = {{240, 249, 232}, {204, 235, 197}, {168, 221, 181}, {123, 204, 196}, {78, 179, 211},
		      {43, 140, 190}, {8, 88, 158}},
		[8] = {{247, 252, 240}, {224, 243, 219}, {204, 235, 197}, {168, 221, 181}, {123, 204, 196},
		      {78, 179, 211}, {43, 140, 190}, {8, 88, 158}},
		[9] = {{247, 252, 240}, {224, 243, 219}, {204, 235, 197}, {168, 221, 181}, {123, 204, 196},
		      {78, 179, 211}, {43, 140, 190}, {8, 104, 172}, {8, 64, 129}},
		[10] = {{247, 252, 240}, {229, 245, 223}, {212, 238, 206}, {192, 230, 191}, {163, 219, 182},
			   {128, 205, 194}, {95, 187, 206}, {63, 161, 201}, {37, 128, 182}, {7, 88, 158}},
		[11] = {{247, 252, 240}, {230, 245, 225}, {216, 239, 210}, {200, 233, 195}, {175, 223, 184},
			   {146, 212, 188}, {115, 198, 199}, {83, 181, 209}, {58, 155, 198}, {35, 124, 180}, {7, 88, 158}},
		[12] = {{247, 252, 240}, {232, 246, 226}, {218, 240, 212}, {205, 235, 198}, {184, 227, 188},
			   {160, 217, 183}, {132, 207, 193}, {105, 192, 202}, {75, 175, 209}, {53, 150, 195},
			   {34, 120, 178}, {7, 88, 158}},
		[13] = {{247, 252, 240}, {233, 246, 227}, {220, 241, 215}, {209, 237, 202}, {192, 230, 191},
			   {171, 222, 182}, {146, 212, 188}, {119, 201, 197}, {95, 187, 206}, {70, 169, 205}, {49, 146, 193},
			   {32, 117, 176}, {7, 88, 158}},
		[14] = {{247, 252, 240}, {234, 247, 228}, {222, 242, 217}, {211, 238, 205}, {198, 232, 194}, {179, 225, 185},
			   {158, 217, 184}, {134, 207, 192}, {111, 196, 200}, {86, 182, 208}, {65, 163, 202}, {46, 142, 191},
			   {31, 115, 175}, {7, 88, 158}},
		[15] = {{247, 252, 240}, {235, 247, 229}, {223, 242, 218}, {214, 239, 207}, {204, 235, 197}, {186, 228, 188},
			   {167, 221, 180}, {146, 212, 188}, {122, 204, 196}, {103, 191, 203}, {77, 178, 210}, {61, 159, 200},
			   {43, 140, 190}, {30, 113, 173}, {7, 88, 158}},
		[16] = {{247, 252, 240}, {236, 247, 230}, {225, 243, 220}, {216, 239, 210}, {206, 236, 199}, {192, 230, 191},
			   {175, 223, 184}, {157, 216, 185}, {136, 208, 192}, {115, 198, 199}, {95, 187, 206}, {73, 173, 208},
			   {58, 155, 198}, {41, 136, 187}, {29, 111, 172}, {7, 88, 158}},
		[17] = {{247, 252, 240}, {236, 248, 230}, {226, 244, 221}, {217, 240, 212}, {209, 237, 202}, {197, 232, 193},
			   {181, 226, 186}, {165, 219, 181}, {146, 212, 188}, {126, 205, 195}, {108, 194, 201}, {88, 183, 208},
			   {70, 169, 205}, {55, 151, 196}, {40, 133, 185}, {28, 110, 171}, {7, 88, 158}},
		[18] = {{247, 252, 240}, {237, 248, 231}, {228, 244, 222}, {219, 241, 213}, {211, 237, 204}, {201, 234, 196},
			   {187, 228, 189}, {172, 222, 182}, {155, 215, 185}, {137, 208, 191}, {118, 201, 197}, {101, 190, 204},
			   {81, 180, 210}, {66, 165, 203}, {52, 149, 194}, {38, 130, 184}, {27, 108, 171}, {7, 88, 158}},
		[19] = {{247, 252, 240}, {238, 248, 231}, {229, 245, 223}, {220, 241, 215}, {212, 238, 206}, {205, 235, 198},
			   {192, 230, 191}, {178, 224, 185}, {163, 219, 182}, {146, 212, 188}, {128, 205, 194}, {112, 196, 200},
			   {95, 187, 206}, {76, 176, 209}, {63, 161, 201}, {49, 146, 193}, {37, 128, 182}, {26, 107, 170},
			   {7, 88, 158}},
		[20] = {{247, 252, 240}, {238, 248, 232}, {230, 245, 224}, {221, 242, 216}, {214, 239, 208}, {207, 236, 200},
			   {196, 232, 193}, {183, 226, 187}, {169, 221, 181}, {154, 215, 185}, {138, 209, 191}, {121, 202, 196},
			   {106, 193, 202}, {89, 184, 207}, {73, 172, 207}, {61, 158, 199}, {47, 144, 192}, {36, 125, 181},
			   {25, 106, 169}, {7, 88, 158}},
		type = "sequential"
	},
	Greys = {
		[2] = {{240, 240, 240}, {99, 99, 99}},
		[3] = {{240, 240, 240}, {189, 189, 189}, {99, 99, 99}},
		[4] = {{247, 247, 247}, {204, 204, 204}, {150, 150, 150}, {82, 82, 82}},
		[5] = {{247, 247, 247}, {204, 204, 204}, {150, 150, 150}, {99, 99, 99}, {37, 37, 37}},
		[6] = {{247, 247, 247}, {217, 217, 217}, {189, 189, 189}, {150, 150, 150}, {99, 99, 99},
		      {37, 37, 37}},
		[7] = {{247, 247, 247}, {217, 217, 217}, {189, 189, 189}, {150, 150, 150}, {115, 115, 115},
		      {82, 82, 82}, {37, 37, 37}},
		[8] = {{255, 255, 255}, {240, 240, 240}, {217, 217, 217}, {189, 189, 189}, {150, 150, 150},
		      {115, 115, 115}, {82, 82, 82}, {37, 37, 37}},
		[9] = {{255, 255, 255}, {240, 240, 240}, {217, 217, 217}, {189, 189, 189}, {150, 150, 150},
		      {115, 115, 115}, {82, 82, 82}, {37, 37, 37}, {0, 0, 0}},
		[10] = {{255, 255, 255}, {243, 243, 243}, {227, 227, 227}, {207, 207, 207}, {184, 184, 184},
		       {154, 154, 154}, {126, 126, 126}, {100, 100, 100}, {71, 71,71}, {37, 37, 37}},
		[11] = {{255, 255, 255}, {244, 244, 244}, {230, 230, 230}, {214, 214, 214}, {194, 194, 194},
		       {169, 169, 169}, {142, 142, 142}, {118, 118, 118}, {94, 94, 94}, {67, 67, 67}, {37, 37, 37}},
		[12] = {{255, 255, 255}, {245, 245, 245}, {233, 233, 233}, {219, 219, 219}, {201, 201, 201},
		       {181, 181, 181}, {156, 156, 156}, {133, 133, 133}, {111, 111, 111}, {90, 90, 90}, {64, 64, 64},
		       {37, 37, 37}},
		[13] = {{255, 255, 255}, {246, 246, 246}, {236, 236, 236}, {222, 222, 222}, {207, 207, 207},
		       {191, 191, 191}, {169, 169, 169}, {147, 147, 147}, {126, 126, 126}, {106, 106, 106}, {87, 87, 87},
		       {62, 62, 62}, {37, 37, 37}},
		[14] = {{255, 255, 255}, {246, 246, 246}, {238, 238, 238}, {225, 225, 225}, {212, 212, 212}, {197, 197, 197},
		       {179, 179, 179}, {158, 158, 158}, {139, 139, 139}, {120, 120, 120}, {102, 102, 102}, {84, 84, 84},
		       {60, 60, 60}, {37, 37, 37}},
		[15] = {{255, 255, 255}, {247, 247, 247}, {240, 240, 240}, {228, 228, 228}, {216, 216, 216}, {202, 202, 202},
			   {189, 189, 189}, {169, 169, 169}, {150, 150, 150}, {132, 132, 132}, {114, 114, 114}, {98, 98, 98},
			   {82, 82, 82}, {58, 58, 58}, {37, 37, 37}},
		[16] = {{255, 255, 255}, {247, 247, 247}, {240, 240, 240}, {230, 230, 230}, {220, 220, 220}, {207, 207, 207},
			   {194, 194, 194}, {178, 178, 178}, {160, 160, 160}, {142, 142, 142}, {126, 126, 126}, {110, 110, 110},
			   {94, 94, 94}, {78, 78,78}, {57, 57, 57}, {37, 37, 37}},
		[17] = {{255, 255, 255}, {248, 248, 248}, {241, 241, 241}, {232, 232, 232}, {222, 222, 222}, {211, 211, 211},
			   {199, 199, 199}, {186, 186, 186}, {169, 169, 169}, {152, 152, 152}, {136, 136, 136}, {121, 121, 121},
			   {106, 106, 106}, {92, 92, 92}, {76, 76,76}, {55, 55, 55}, {37, 37, 37}},
		[18] = {{255, 255, 255}, {248, 248, 248}, {242, 242, 242}, {234, 234, 234}, {225, 225, 225}, {215, 215, 215},
			   {203, 203, 203}, {192, 192, 192}, {177, 177, 177}, {161, 161, 161}, {145, 145, 145}, {131, 131, 131},
			   {117, 117, 117}, {103, 103, 103}, {89, 89, 89}, {73, 73,73}, {54, 54, 54}, {37, 37, 37}},
		[19] = {{255, 255, 255}, {249, 249, 249}, {243, 243, 243}, {236, 236, 236}, {227, 227, 227}, {218, 218, 218},
			   {207, 207, 207}, {196, 196, 196}, {184, 184, 184}, {169, 169, 169}, {154, 154, 154}, {140, 140, 140},
			   {126, 126, 126}, {113, 113, 113}, {100, 100, 100}, {87, 87, 87}, {71, 71,71}, {53, 53, 53}, {37, 37, 37}},
		[20] = {{255, 255, 255}, {249, 249, 249}, {243, 243, 243}, {237, 237, 237}, {229, 229, 229}, {220, 220, 220},
			   {211, 211, 211}, {200, 200, 200}, {190, 190, 190}, {176, 176, 176}, {162, 162, 162}, {148, 148, 148},
			   {135, 135, 135}, {122, 122, 122}, {109, 109, 109}, {97, 97, 97}, {85, 85, 85}, {69, 69, 69}, {52, 52, 52},
			   {37, 37, 37}},
		type = "sequential"
	},
	YlOrRd = {
		[2] = {{255, 237, 160},  {240, 59, 32}},
		[3] = {{255, 237, 160}, {254, 178, 76}, {240, 59, 32}},
		[4] = {{255, 255, 178}, {254, 204, 92}, {253, 141, 60}, {227, 26, 28}},
		[5] = {{255, 255, 178}, {254, 204, 92}, {253, 141, 60}, {240, 59, 32}, {189, 0, 38}},
		[6] = {{255, 255, 178}, {254, 217, 118}, {254, 178, 76}, {253, 141, 60}, {240, 59, 32},
		      {189, 0, 38}},
		[7] = {{255, 255, 178}, {254, 217, 118}, {254, 178, 76}, {253, 141, 60}, {252,78, 42},
		      {227, 26, 28}, {177, 0, 38}},
		[8] = {{255, 255, 204}, {255, 237, 160}, {254, 217, 118}, {254, 178, 76}, {253, 141, 60},
		      {252, 78, 42}, {227, 26, 28}, {177, 0, 38}},
		[9] = {{255, 255, 204}, {255, 239, 165}, {254, 221, 128}, {254, 192, 91}, {253, 159, 67},
		      {253, 119, 52}, {245, 67, 38}, {220, 23, 29}, {177, 0, 38}},
		[10] = {{255, 255, 204}, {255, 240, 169}, {254, 225, 136}, {254, 204, 104}, {254, 174, 74},
		       {253, 145, 61}, {252, 101, 47}, {240, 58, 35}, {215, 20, 30}, {177, 0, 38}},
		[11] = {{255, 255, 204}, {255, 242, 173}, {254, 228, 143}, {254, 213, 113}, {254, 185, 84},
		       {253, 159, 67}, {253, 129, 56}, {252, 85, 43}, {237, 51, 33}, {211, 18, 31}, {177, 0, 38}},
		[12] = {{255, 255, 204}, {255, 243, 175}, {255, 231, 148}, {254, 218, 121}, {254, 195, 95}, {254, 171, 73},
		       {253, 147, 62}, {253, 115, 51}, {249,74, 40}, {233, 44, 31}, {208, 17, 32}, {177, 0, 38}},
		[13] = {{255, 255, 204}, {255, 244, 178}, {255, 233, 153}, {254, 221, 128}, {254, 204, 104}, {254, 181, 79},
		       {253, 159, 67}, {253, 136, 58}, {252, 101, 47}, {245, 67, 38}, {231, 38, 30}, {205, 15, 33},
		       {177, 0, 38}},
		[14] = {{255, 255, 204}, {255, 245, 180}, {255, 235, 156}, {254, 224, 134}, {254, 211, 111}, {254, 190, 89},
		       {254, 169, 72}, {253, 149, 63}, {253, 123, 54}, {252, 89, 44}, {242, 61, 36}, {228, 31, 29},
		       {203, 14, 33}, {177, 0, 38}},
		[15] = {{255, 255, 204}, {255, 245, 181}, {255, 236, 159}, {254, 226, 139}, {254, 216, 118}, {254, 197, 97},
		       {254, 178, 76}, {253, 159, 67}, {253, 140, 59}, {253, 112, 50}, {252,77, 42}, {239, 56, 34},
		       {227, 25, 27}, {201, 13, 33}, {177, 0, 38}},
		[16] = {{255, 255, 204}, {255, 246, 183}, {255, 238, 162}, {254, 228, 143}, {254, 219, 123}, {254, 204, 104},
		       {254, 185, 84}, {253, 168, 71}, {253, 151, 64}, {253, 129, 56}, {252, 101, 47}, {248,72, 40},
		       {237, 51, 33}, {223, 24, 28}, {200, 12, 34}, {177, 0, 38}},
		[17] = {{255, 255, 204}, {255, 247, 184}, {255, 239, 165}, {255, 230, 146}, {254, 221, 128}, {254, 209, 110},
		       {254, 192, 91}, {254, 175, 74}, {253, 159, 67}, {253, 143, 60}, {253, 119, 52}, {252, 91, 45},
		       {245, 67, 38}, {234, 46, 32}, {220, 23, 29}, {198, 11, 34}, {177, 0, 38}},
		[18] = {{255, 255, 204}, {255, 247, 185}, {255, 240, 167}, {255, 232, 150}, {254, 224, 132}, {254, 214, 115},
		       {254, 198, 98}, {254, 182, 81}, {253, 167, 71}, {253, 152, 64}, {253, 134, 57}, {253, 110, 50},
		       {252, 82, 42}, {243, 62, 36}, {232, 42, 31}, {218, 21, 30}, {197, 11, 34}, {177, 0, 38}},
		[19] = {{255, 255, 204}, {255, 247, 186}, {255, 240, 169}, {255, 233, 153}, {254, 225, 136}, {254, 218, 120},
		       {254, 204, 104}, {254, 188, 87}, {254, 174, 74}, {253, 159, 67}, {253, 145, 61}, {253, 125, 54},
		       {252, 101, 47}, {250,75, 41}, {240, 58, 35}, {231, 38, 30}, {215, 20, 30}, {196, 10, 34}, {177, 0, 38}},
		[20] = {{255, 255, 204}, {255, 248, 187}, {255, 241, 171}, {255, 234, 155}, {254, 227, 140}, {254, 220, 124},
		       {254, 208, 109}, {254, 194, 93}, {254, 180, 78}, {253, 166,70}, {253, 152, 64}, {253, 138, 58},
		       {253, 117, 52}, {252, 93, 45}, {248,71, 39}, {238, 54, 34}, {229, 33, 29}, {213, 19, 31}, {195, 9, 35},
		       {177, 0, 38}},
		type = "sequential"
	},
	PuRd = {
		[2] = {{231, 225, 239}, {221, 28, 119}},
		[3] = {{231, 225, 239}, {201, 148, 199}, {221, 28, 119}},
		[4] = {{241, 238, 246}, {215, 181, 216}, {223, 101, 176}, {206, 18, 86}},
		[5] = {{241, 238, 246}, {215, 181, 216}, {223, 101, 176}, {221, 28, 119}, {152, 0, 67}},
		[6] = {{241, 238, 246}, {212, 185, 218}, {201, 148, 199}, {223, 101, 176}, {221, 28, 119},
		      {152, 0, 67}},
		[7] = {{241, 238, 246}, {212, 185, 218}, {201, 148, 199}, {223, 101, 176}, {231, 41, 138},
		      {206, 18, 86}, {145, 0, 63}},
		[8] = {{247, 244, 249}, {231, 225, 239}, {212, 185, 218}, {201, 148, 199}, {223, 101, 176},
		      {231, 41, 138}, {206, 18, 86}, {145, 0, 63}},
		[9] = {{247, 244, 249}, {231, 225, 239}, {212, 185, 218}, {201, 148, 199}, {223, 101, 176},
		      {231, 41, 138}, {206, 18, 86}, {152, 0, 67}, {103, 0, 31}},
		[10] = {{247, 243, 248}, {234, 229, 241}, {220, 202, 227}, {208, 172, 211}, {203, 143, 196},
		       {220, 106, 178}, {229, 66, 150}, {220, 31, 114}, {192, 13, 80}, {145, 0, 63}},
		[11] = {{247, 243, 248}, {235, 230, 241}, {223, 208, 230}, {210, 181, 216}, {203, 155, 202},
		       {213, 126, 187}, {225, 91, 168}, {230, 49, 141}, {216, 27, 106}, {187, 11, 78}, {145, 0, 63}},
		[12] = {{247, 243, 248}, {236, 231, 242}, {225, 214, 233}, {213, 188, 219}, {206, 164, 207},
		       {205, 140, 194}, {219, 110, 180}, {227, 78, 158}, {228, 39, 133}, {213, 24, 99}, {183, 10,77},
		       {145, 0, 63}},
		[13] = {{247, 243, 248}, {237, 232, 243}, {227, 218, 235}, {216, 194, 223}, {208, 172, 211},
		       {201, 151, 200}, {213, 126, 187}, {223, 97, 172}, {229, 66, 150}, {224, 35, 124}, {210, 22, 94},
		       {180, 9, 76}, {145, 0, 63}},
		[14] = {{247, 243, 248}, {238, 233, 243}, {229, 221, 237}, {219, 200, 226}, {210, 179, 215},
		       {204, 159, 204}, {206, 138, 193}, {218, 113, 181}, {226, 86, 164}, {230, 53, 143},
		       {221, 32, 117}, {208, 20, 89}, {177, 8, 75}, {145, 0, 63}},
		[15] = {{247, 243, 248}, {238, 234, 243}, {230, 224, 238}, {221, 204, 228}, {211, 184, 217},
		       {206, 166, 208}, {201, 147, 198}, {213, 126, 187}, {223, 101, 176}, {227, 76, 156}, {230, 40, 138},
		       {218, 30, 111}, {205, 18, 85}, {175,7,74}, {145, 0, 63}},
		[16] = {{247, 243, 248}, {239, 235, 244}, {232, 226, 239}, {223, 208, 230}, {214, 190, 220},
		       {208, 172, 211}, {203, 155, 202}, {207, 136, 192}, {217, 114, 182}, {225, 91, 168}, {229, 66, 150},
		       {227, 38, 130}, {216, 27, 106}, {201, 16, 84}, {172, 7,73}, {145, 0, 63}},
		[17] = {{247, 243, 248}, {239, 235, 244}, {232, 227, 240}, {225, 212, 232}, {216, 194, 223},
		       {210, 178, 214}, {205, 161, 206}, {202, 145, 197}, {213, 126, 187}, {221, 104, 177}, {226, 82, 161},
		       {229, 56, 144}, {224, 35, 124}, {214, 25, 101}, {198, 15, 83}, {171, 6, 72}, {145, 0, 63}},
		[18] = {{247, 243, 248}, {240, 236, 244}, {233, 228, 240}, {226, 215, 234}, {218, 199, 225},
		       {211, 182, 216}, {207, 167, 209}, {202, 152, 201}, {208, 135, 192}, {217, 116, 182}, {224, 95, 171},
		       {228, 74, 155}, {230, 46, 140}, {222, 33, 119}, {212, 24, 97}, {194, 14, 81}, {169, 6,72}, {145, 0, 63}},
		[19] = {{247, 243, 248}, {240, 236, 245}, {234, 229, 241}, {227, 218, 235}, {220, 202, 227}, {213, 187, 219},
		       {208, 172, 211}, {204, 158, 204}, {203, 143, 196}, {213, 126, 187}, {220, 106, 178}, {225, 87, 165},
		       {229, 66, 150}, {229, 39, 135}, {220, 31, 114}, {210, 22, 94}, {192, 13, 80}, {168, 5, 71}, {145, 0, 63}},
		[20] = {{247, 243, 248}, {241, 236, 245}, {235, 229, 241}, {229, 220, 236}, {222, 205, 229}, {215, 191, 221},
		       {209, 177, 213}, {205, 163, 206}, {201, 149, 199}, {208, 134, 191}, {216, 117, 183}, {223, 98, 173},
		       {227, 80, 159}, {229, 58, 145}, {227, 37, 129}, {218, 29, 110}, {208, 20, 91}, {189, 12, 79}, {167, 5,71},
		       {145, 0, 63}},
		type = "sequential"
	},
	Blues = {
		[2] = {{222, 235, 247}, {49, 130, 189}},
		[3] = {{222, 235, 247}, {158, 202, 225}, {49, 130, 189}},
		[4] = {{239, 243, 255}, {189, 215, 231}, {107, 174, 214}, {33, 113, 181}},
		[5] = {{239, 243, 255}, {189, 215, 231}, {107, 174, 214}, {49, 130, 189}, {8, 81, 156}},
		[6] = {{239, 243, 255}, {198, 219, 239}, {158, 202, 225}, {107, 174, 214}, {49, 130, 189},
		      {8, 81, 156}},
		[7] = {{239, 243, 255}, {198, 219, 239}, {158, 202, 225}, {107, 174, 214}, {66, 146, 198},
		      {33, 113, 181}, {8, 69, 148}},
		[8] = {{247, 251, 255}, {222, 235, 247}, {198, 219, 239}, {158, 202, 225}, {107, 174, 214},
		      {66, 146, 198}, {33, 113, 181}, {8, 69, 148}},
		[9] = {{247, 251, 255}, {222, 235, 247}, {198, 219, 239}, {158, 202, 225}, {107, 174, 214},
		      {66, 146, 198}, {33, 113, 181}, {8, 81, 156}, {8, 48, 107}},
		[10] = {{247, 250, 255}, {227, 238, 248}, {208, 226, 242}, {184, 213, 234}, {152, 198, 223},
		       {113, 177, 215}, {80, 155, 203}, {53, 131, 190}, {29, 102, 173}, {7, 69, 147}},
		[11] = {{247, 250, 255}, {229, 239, 249}, {212, 228, 243}, {194, 217, 237}, {166, 205, 227},
		       {133, 187, 219}, {99, 168, 210}, {70, 148, 199}, {48, 126, 187}, {27, 99, 171}, {7, 69, 147}},
		[12] = {{247, 250, 255}, {231, 240, 249}, {215, 230, 244}, {200, 220, 239}, {176, 209, 231},
		       {149, 196, 223}, {117, 179, 216}, {89, 161, 206}, {63, 142, 196}, {43, 121, 185}, {26, 96, 168},
		       {7, 69, 147}},
		[13] = {{247, 250, 255}, {232, 241, 250}, {218, 232, 245}, {204, 222, 241}, {184, 213, 234},
		       {161, 203, 226}, {133, 187, 219}, {103, 171, 212}, {80, 155, 203}, {59, 137, 193}, {39, 118, 183},
		       {25, 94, 167}, {7, 69, 147}},
		[14] = {{247, 250, 255}, {233, 242, 250}, {220, 233, 246}, {207, 225, 242}, {191, 216, 236},
		       {170, 207, 229}, {146, 195, 222}, {119, 180, 216}, {95, 165, 209}, {73, 150, 200}, {55, 133, 191},
		       {36, 115, 182}, {24, 92, 165}, {7, 69, 147}},
		[15] = {{247, 250, 255}, {234, 242, 251}, {222, 235, 247}, {210, 226, 243}, {197, 218, 238},
		       {178, 210, 231}, {158, 202, 224}, {133, 187, 219}, {107, 173, 214}, {87, 159, 205}, {65, 146, 197},
		       {51, 129, 189}, {32, 113, 180}, {23, 90, 164}, {7, 69, 147}},
		[16] = {{247, 250, 255}, {235, 243, 251}, {223, 236, 247}, {212, 228, 243}, {201, 221, 240}, {184, 213, 234},
		       {166, 205, 227}, {145, 194, 222}, {121, 181, 216}, {99, 168, 210}, {80, 155, 203}, {62, 141, 195},
		       {48, 126, 187}, {31, 109, 178}, {22, 89, 163}, {7, 69, 147}},
		[17] = {{247, 250, 255}, {236, 243, 251}, {225, 236, 248}, {214, 229, 244}, {204, 222, 241}, {190, 215, 236},
		       {173, 208, 230}, {155, 200, 224}, {133, 187, 219}, {110, 175, 214}, {92, 163, 207}, {74, 151, 200},
		       {59, 137, 193}, {45, 123, 186}, {30, 107, 176}, {22, 87, 162}, {7, 69, 147}},
		[18] = {{247, 250, 255}, {236, 244, 251}, {226, 237, 248}, {216, 231, 245}, {206, 224, 241}, {195, 217, 238},
		       {179, 210, 232}, {162, 203, 226}, {143, 193, 221}, {122, 182, 217}, {102, 170, 212}, {86, 159, 205},
		       {68, 147, 198}, {55, 134, 192}, {42, 120, 185}, {30, 105, 175}, {21, 86, 161}, {7, 69, 147}},
		[19] = {{247, 250, 255}, {237, 244, 251}, {227, 238, 248}, {218, 232, 245}, {208, 226, 242}, {199, 219, 239},
		       {184, 213, 234}, {169, 206, 228}, {152, 198, 223}, {133, 187, 219}, {113, 177, 215}, {96, 166, 209},
		       {80, 155, 203}, {64, 144, 197}, {53, 131, 190}, {39, 118, 183}, {29, 102, 173}, {20, 85, 160}, {7, 69, 147}},
		[20] = {{247, 250, 255}, {237, 245, 252}, {228, 239, 249}, {219, 233, 246}, {210, 227, 243}, {201, 221, 240},
		       {189, 215, 236}, {175, 209, 230}, {160, 202, 225}, {142, 193, 221}, {124, 182, 217}, {105, 172, 213},
		       {90, 162, 207}, {75, 151, 201}, {61, 140, 195}, {50, 128, 189}, {37, 116, 182}, {28, 101, 172},
		       {20, 84, 160}, {7, 69, 147}},
		type = "sequential"
	},
	PuBuGn = {
		[2] = {{236, 226, 240}, {28, 144, 153}},
		[3] = {{236, 226, 240}, {166, 189, 219}, {28, 144, 153}},
		[4] = {{246, 239, 247}, {189, 201, 225}, {103, 169, 207}, {2, 129, 138}},
		[5] = {{246, 239, 247}, {189, 201, 225}, {103, 169, 207}, {28, 144, 153}, {1, 108, 89}},
		[6] = {{246, 239, 247}, {208, 209, 230}, {166, 189, 219}, {103, 169, 207}, {28, 144, 153},
		      {1, 108, 89}},
		[7] = {{246, 239, 247}, {208, 209, 230}, {166, 189, 219}, {103, 169, 207}, {54, 144, 192},
		      {2, 129, 138}, {1, 100, 80}},
		[8] = {{255, 247, 251}, {236, 226, 240}, {208, 209, 230}, {166, 189, 219}, {103, 169, 207},
		      {54, 144, 192}, {2, 129, 138}, {1, 100, 80}},
		[9] = {{255, 247, 251}, {236, 226, 240}, {208, 209, 230}, {166, 189, 219}, {103, 169, 207},
		      {54, 144, 192}, {2, 129, 138}, {1, 108, 89}, {1, 70, 54}},
		[10] = {{255, 247, 250}, {240, 230, 242}, {220, 216, 234}, {194, 202, 226}, {159, 186, 217},
		       {110, 171, 208}, {72, 152, 196}, {37, 137, 167}, {4, 122, 124}, {0, 100, 80}},
		[11] = {{255, 247, 250}, {241, 232, 243}, {224, 219, 235}, {203, 206, 228}, {174, 192, 221},
		       {136, 179, 213}, {94, 163, 203}, {60, 146, 193}, {31, 135, 159}, {4, 120, 120}, {0, 100, 80}},
		[12] = {{255, 247, 250}, {242, 233, 243}, {228, 221, 237}, {210, 210, 230}, {185, 198, 224}, {155, 185, 216},
		       {115, 172, 209}, {82, 157, 200}, {51, 142, 186}, {24, 133, 152}, {5, 118, 116}, {0, 100, 80}},
		[13] = {{255, 247, 250}, {243, 234, 244}, {231, 223, 238}, {215, 213, 232}, {194, 202, 226}, {169, 190, 219},
		       {136, 179, 213}, {99, 166, 205}, {72, 152, 196}, {45, 140, 178}, {17, 131, 146}, {5, 116, 113}, {0, 100, 80}},
		[14] = {{255, 247, 250}, {244, 235, 245}, {233, 224, 239}, {218, 215, 233}, {201, 205, 228}, {179, 195, 222},
		       {152, 184, 216}, {119, 173, 209}, {89, 161, 202}, {63, 147, 194}, {40, 138, 170}, {9, 130, 142}, {5, 115, 110}, {0, 100, 80}},
		[15] = {{255, 247, 250}, {245, 236, 245}, {235, 225, 240}, {222, 217, 234}, {208, 209, 229}, {187, 198, 224},
		       {165, 189, 218}, {136, 179, 213}, {102, 169, 206}, {80, 156, 199}, {53, 144, 191}, {35, 136, 164}, {1, 128, 138},
		       {5, 114, 108}, {0, 100, 80}},
		[16] = {{255, 247, 250}, {246, 237, 245}, {237, 227, 240}, {224, 219, 235}, {211, 211, 231}, {194, 202, 226}, {174, 192, 221},
		       {150, 183, 215}, {121, 174, 210}, {94, 163, 203}, {72, 152, 196}, {49, 142, 184}, {31, 135, 159}, {2, 127, 134},
		       {4, 113, 106}, {0, 100, 80}},
		[17] = {{255, 247, 250}, {246, 237, 246}, {238, 228, 241}, {227, 220, 236}, {215, 213, 232}, {200, 205, 227}, {181, 196, 223},
		       {162, 187, 218}, {136, 179, 213}, {107, 170, 207}, {86, 159, 201}, {64, 148, 194}, {45, 140, 178}, {26, 133, 154},
		       {3, 125, 130}, {4, 112, 104}, {0, 100, 80}},
		[18] = {{255, 247, 250}, {247, 238, 246}, {239, 229, 241}, {229, 221, 237}, {217, 214, 233}, {205, 207, 229}, {188, 199, 224},
		       {171, 191, 220}, {148, 183, 215}, {123, 174, 210}, {98, 166, 205}, {79, 155, 199}, {57, 145, 192}, {41, 138, 172},
		       {22, 132, 150}, {4, 123, 127}, {4, 111, 103}, {0, 100, 80}},
		[19] = {{255, 247, 250}, {247, 238, 246}, {240, 230, 242}, {231, 223, 238}, {220, 216, 234}, {209, 209, 230}, {194, 202, 226},
		       {177, 194, 222}, {159, 186, 217}, {136, 179, 213}, {110, 171, 208}, {91, 161, 202}, {72, 152, 196}, {52, 143, 188},
		       {37, 137, 167}, {17, 131, 146}, {4, 122, 124}, {4, 111, 102}, {0, 100, 80}},
		[20] = {{255, 247, 250}, {247, 239, 246}, {240, 231, 242}, {233, 224, 238}, {222, 217, 235}, {212, 211, 231}, {199, 204, 227},
		       {183, 197, 223}, {168, 190, 219}, {147, 182, 215}, {124, 175, 210}, {100, 167, 206}, {84, 158, 200}, {66, 149, 195},
		       {48, 141, 183}, {34, 136, 163}, {12, 130, 143}, {4, 121, 122}, {4, 110, 100}, {0, 100, 80}},
		type = "sequential"
	}
}

-- to build the table of colors in the documentation of Map
--[[
local rgbMap = {}
forEachOrderedElement(brewerRGB, function(idx, value)
	local n = getn(value)
	if not rgbMap[n] then -- SKIP
		rgbMap[n] = {}
	end
	table.insert(rgbMap[n], idx) -- SKIP
end)

-- check colorbrewer descriptions
forEachOrderedElement(rgbMap, function(idx, value)
	local arg_list = table.concat(value, ", ")
	print("-- "..arg_list.." & "..idx.." \\")
end)
--]]

forEachElement(brewerMatchNames, function(_, value)
	if not brewerRGB[value] then
		print("Color "..value.." does not have a description.")
	end
end)

forEachElement(brewerRGB, function(idx, value)
	forEachElement(value, function(midx, mvalue)
		if type(midx) ~= "number" then return end

		if midx ~= #mvalue then
			print("Color description '"..idx.."' in position "..midx.." has "..#mvalue.." colors.")
		end

		forEachElement(mvalue, function(mmidx, mmvalue)
			if #mmvalue ~= 3 then
				print("Color description '"..idx.."' in position "..midx.."/"..mmidx.." does not have 3 numbers.")
			end
		end) 
	end)

	local found = false
	forEachElement(brewerMatchNames, function(_, mvalue)
		if idx == mvalue then
			found = true
		end
	end)

	if not found then
		print("Color description '"..idx.."' does not have a value in names.")
	end
end)

Map_ = {
	type_ = "Map",
	--- Save a Map into a file. Supported extensions are bmp, jpg, png, and tiff.
	-- @arg file A string with the file name.
	-- @usage cs = CellularSpace{
	--     xdim = 10
	-- }
	--
	-- map = Map{
	--     target = cs,
	--     select = "x",
	--     min = 0,
	--     max = 10,
	--     slices = 4,
	--     color = "Blues"
	-- }
	--
	-- map:save("file.bmp")
	-- rmFile("file.bmp")
	save = function(self, file)
		local _, extension = string.match(file, "(.-)([^%.]+)$")

		local availableExtensions = {bmp = true, jpg = true, png = true, tiff = true}

		if not availableExtensions[extension] then
			invalidFileExtensionError(1, extension)
		end

		extension = string.upper(extension)

		self.cObj_:save(file, extension)
	end,
	--- Update the Map with the latest values of its target. It is usually recommended
    -- to use the Map as action of an Event instead of calling this function explicitly.
	-- @arg modelTime An optional argument that can be a number with the current time or an Event.
	-- @usage cs = CellularSpace{
	--     xdim = 10
	-- }
	--
	-- map = Map{
	--     target = cs,
	--     select = "x",
	--     min = 0,
	--     max = 10,
	--     slices = 4,
	--     color = "Blues"
	-- }
	--
	-- map:update()
	update = function(self, modelTime)
		self.target:notify(modelTime)
	end
}

metaTableMap_ = {__index = Map_}

--- Create a map with the spatial distribution of a given CellularSpace, Agent,
-- or Society. It draws each element into the screen, according a given attribute.
-- Each notify() draws the Map again in the screen.
-- @arg data.target A CellularSpace, Agent, or Society.
-- @arg data.value A table with the possible values for the selected attributes.
-- @arg data.max The maximum value of the attribute (used only for numbers).
-- @arg data.min The minimum value of the attribute (used only for numbers).
-- @arg data.slices Number of colors to be used for plotting. It must be an integer
-- number greater than one.
-- @arg data.background A Map that can be used as background to plot a Society.
-- It can also be a string with a color to be used as background.
-- @arg data.grid Draw a grid around the Cells? The default value is false.
-- @arg data.font A string with a font name to draw Agents.
-- @arg data.size The size of the font to be used to draw agents in space.
-- @arg data.symbol A string to be used to draw Agents in space. They can be any string,
-- but there are some predefined symbols available. See the link Font in the left menu.
-- @arg data.grouping A string with the strategy to slice and color the data. See below.
-- @tabular grouping
-- Grouping & Description & Compulsory arguments & Optional arguments\
-- "equalsteps" & The values are divided into a set of slices with the same range. Each slice is
-- associated to a given color. Equalsteps require only two colors in the argument color, one for
-- the minimum and the other for the maximum value. The other colors are computed from a linear
-- interpolation of the two colors. & color, slices, max, min, target, select & precision,
-- grid, invert \
-- "placement" & Observe a CellularSpace showing the number of Agents in each Cell. Values can
-- be grouped in the same way of uniquevalue or equalsteps. & color, target & 
-- min, max, value, slices, grid \
-- "quantil" & Aggregate the values into slices with approximately the same size. Values are
-- ordered from lower to higher and then sliced. This strategy uses two colors in the same way
-- of equalsteps. & color, slices, max, min, target, select & precision, invert, grid \
-- "stdeviation" & Define slices according to the distribution of a given attribute. Values with
-- similar positive or negative distances to the average will belong to the same slice. &
-- color, stdColor, target, select & stdDeviation, precision, grid \
-- "uniquevalue" & Associate each attribute value to a given color. Attributes with type string can
-- only be sliced with this strategy. It can be used for CellularSpaces as well as for
-- Society. & color, target, select, value & label, background, 
-- size, font, symbol, grid \
-- "none" & Does not execute any color slicing. It can be used for CellularSpaces as well as for
-- Society. & & background, size, font, symbol, target, color, grid \
-- @arg data.label A table with the labels for the attributes.
-- @arg data.stdDeviation When the grouping mode is stddeviation, it has to be one of "full",
-- "half" "quarter", or "none".
-- @arg data.precision The number of decimal digits for slicing. It must be an integer
-- number greater than zero. It indicates that differences less than 10^(-digits) will
-- not be considered. It means that, for instance, if a slice is in the interval [1.0, 2.0]
-- and precision is 2 (0.01), a value 0.99 might belong to such slice.
-- @arg data.color A table with the colors for the attributes. Colors can be described as strings 
-- ("red", "green", "blue", "white", "black",
-- "yellow", "brown", "cyan", "gray", "magenta", "orange", "purple", and their light and dark
-- compositions, such as "lightGray" and "darkGray"), as tables with three integer numbers
-- representing RGB compositions, such as {0, 0, 0}, or even as a string with a ColorBrewer format
-- (see http://colorbrewer2.org/). The colors available and the maximum number of slices for each
-- of them are:
-- @tabular color
-- Name & Max \
-- Accent, Dark, Set2 & 7 \
-- Pastel2, Set1 & 8 \
-- Pastel1 & 9 \
-- PRGn, RdYlGn, Spectral & 10 \
-- BrBG, Paired, PiYG, PuOr, RdBu, RdGy, RdYlBu, Set3 & 11 \
-- BuGn, BuPu, OrRd, PuBu & 19 \
-- Blues, GnBu, Greens, Greys, Oranges, PuBuGn, PuRd, Purples, RdPu, Reds, YlGn, YlGnBu, YlOrBr, YlOrRd & 20 \
-- @arg data.stdColor A table just as argument color. It is needed only when standard deviation is
-- the chosen strategy.
-- @arg data.invert Invert the order of the colors when using ColorBrewer. The default value is false.
-- @arg data.select A string with the name of the attribute to be visualized.
-- @usage cell = Cell{
--     temperature = Random{min = 0, max = 50},
--     seggregation = Random{0, 1, 2},
--     forest = Random{min = 0, max = 1}
-- }
--
-- cs = CellularSpace{
--     xdim = 10,
--     instance = cell
-- }
--
-- Map{
--     target = cs,
--     select = "temperature",
--     min = 0,
--     max = 50,
--     slices = 10,
--     color = {"blue", "red"}
-- }
--
-- Map{
--     target = cs,
--     select = "seggregation",
--     value = {0, 1, 2},
--     color = {"blue", "green", "red"},
--     label = {"low", "medium", "high"}
-- }
--
-- Map{
--     target = cs,
--     select = "forest",
--     color  = "RdYlGn",
--     min = 0,
--     max = 1,
--     slices = 10
-- }
--
-- -- Visualizing the result of a function
-- cell = Cell{
--     cover = function(cell)
--         if Random():number() > 0.2 then
--             return "pasture"
--         else
--             return "soil"
--         end
--     end
-- }
--
-- cs = CellularSpace{
--     xdim = 30,
--     instance = cell
-- }
--
-- Map{
--     target = cs,
--     select = "cover",
--     value = {"soil", "pasture"},
--     color = {"brown", "green"}
-- }
--
-- -- Visualizing the agents of a Society
-- soc = Society{
--     instance = Agent{},
--     quantity = 20
-- }
--
-- cs = CellularSpace{
--     xdim = 10
-- }
--
-- e = Environment{
--     cs,
--     soc
-- }
--
-- e:createPlacement{}
--
-- m = Map{
--     target = soc,
--     symbol = "smile",
--     color = "yellow",
--     background = "darkGreen",
--     grid = true,
--     size = 25
-- }
function Map(data)
	verifyNamedTable(data)
	mandatoryTableArgument(data, "target")

	if not belong(type(data.target), {"CellularSpace", "Agent", "Society"}) then
		customError("Invalid type. Maps only work with CellularSpace, Agent, Society, got "..type(data.target)..".")
	end

	if type(data.target) == "Agent" then
		local s = Society{instance = Agent{}, quantity = 0}
		s:add(data.target)
		data.target = s
		return Map(data)
	end

	optionalTableArgument(data, "value", "table")
	optionalTableArgument(data, "select", "string")

	if type(data.background) ~= "Map" then
		defaultTableValue(data, "grid", false)
	elseif data.grid then
		customWarning("Argument 'grid' cannot be used with a Map 'background'.")
	end

	if data.grouping == nil then
		if data.slices ~= nil or data.min ~= nil or data.max ~= nil then
			data.grouping = "equalsteps"
		elseif data.value ~= nil then
			data.grouping = "uniquevalue"
		elseif data.select == nil then
			data.grouping = "none"
		else
			customError("It was not possible to infer argument 'grouping'.")
		end
	end

	if type(data.color) == "string" then
		local firstChar = string.sub(data.color, 0, 1)

		if firstChar:lower() == firstChar then
			data.color = {data.color}
		end
	end

	if type(data.target) == "Society" then
		if #data.target == 0 then
			customError("It is not possible to create a Map from an empty Society.")
		elseif not data.target:sample().cell then
			customError("The Society does not have a placement. Please use Environment:createPlacement() first.")
		end

		defaultTableValue(data, "size", 1)
		defaultTableValue(data, "symbol", "bug")

		if data.font == nil then
			forEachOrderedElement(_Gtme.fonts, function(font, mtable)
				if mtable[data.symbol] then
					data.font = font
					data.symbol = mtable[data.symbol]
				end
			end)
		end

		if type(data.symbol) == "string" then
			defaultTableValue(data, "font", "Ubuntu")
		end

		if _Gtme.fonts[data.font] then
			local symbol = _Gtme.fonts[data.font][data.symbol]
			if symbol then
				data.symbol = symbol
			end
		end

		if cpp_hasfont(data.font) == 0 then
			customWarning("Font '"..data.font.."' is not installed. Using default font.")
		end

		local mcolor = "white"
		if type(data.background) == "string" then
			mcolor = data.background
			data.background = nil
		end

		if not data.background then
			local cs = data.target:sample():getCell().parent

			if data.grid == false then data.grid = nil end

			data.background = Map{
				target = cs,
				color = mcolor,
				grid = data.grid
			}
		end

		mandatoryTableArgument(data, "background", "Map")
	end

	if type(data.color) == "table" then
		for i = 1, #data.color do
			if type(data.color[i]) == "string" then
				local colorName = data.color[i]
				data.color[i] = colors[colorName]
	
				if data.color[i] == nil then
					local s = suggestion(colorName, colors)
					if s then
						customError(switchInvalidArgumentSuggestionMsg(colorName, "color", s))
					else
						customError("Color '"..colorName.."' not found. Check the name or use a table with an RGB description.")
					end
				end
			elseif type(data.color[i]) ~= "table" then
				customError("Invalid description for color in position "..i..". It should be a table or string, got "..type(data.color[i])..".")
			else
				local value = data.color[i]
				verify(#value == 3, "RGB composition should have 3 values, got "..#value.." values in position "..i..".")

				forEachElement(value, function(_, _, mtype)
					if mtype ~= "number" then
						customError("All the elements of an RGB composition should be numbers, got '"..mtype.."' in position "..i..".")
					end
				end)
			end
		end
	elseif not belong(type(data.color), {"string", "nil"}) then
		customError(incompatibleTypeMsg("color", "string or table", data.color))
	end

	switch(data, "grouping"):caseof{
		equalsteps = function()
			verifyUnnecessaryArguments(data, {"target", "select", "color", "grouping", "min", "max", "slices", "invert", "grid"})

			mandatoryTableArgument(data, "select", "string")
			mandatoryTableArgument(data, "target", "CellularSpace")

			local sample = data.target.cells[1][data.select]

			verify(sample ~= nil, "Selected element '"..data.select.."' does not belong to the target.")
			if not belong(type(sample), {"number", "function"}) then
				customError("Selected element should be number or function, got "..type(sample)..".")
			end

			if data.min == nil or data.max == nil then
				local min = math.huge
				local max = -math.huge

				forEachCell(data.target, function(cell)
					local mdata = cell[data.select]

					if type(mdata) == "function" then
						mdata = mdata(cell)
					end

					if min > mdata then
						min = mdata
					elseif max < mdata then
						max = mdata
					end
				end)

				if data.min == nil then data.min = min end
				if data.max == nil then data.max = max end
			end

			mandatoryTableArgument(data, "slices", "number")
			mandatoryTableArgument(data, "min", "number")
			mandatoryTableArgument(data, "max", "number")
			defaultTableValue(data, "invert", false)

			verify(data.min < data.max, "Argument 'min' ("..data.min..") should be less than 'max' ("..data.max..").")
			verify(data.slices > 1, "Argument 'slices' ("..data.slices..") should be greater than one.")

			if type(data.color) == "string" then
				local mcolors = brewerMatchNames[data.color]

				if not mcolors then
					local s = suggestion(data.color, brewerMatchNames)
					if s then
						customError(switchInvalidArgumentSuggestionMsg(data.color, "color", s))
					else
						customError("Invalid color '"..data.color.."'.")
					end
				end

				mcolors = brewerRGB[mcolors][data.slices]

				if not mcolors then
					customError("Color '"..data.color.."' does not support "..data.slices.." slices.")
				end

				if data.invert then
					local invcolors = {}
					for i = #mcolors, 1, -1 do
						table.insert(invcolors, mcolors[i])
					end

					data.color = invcolors
				else
					data.color = mcolors
				end
			end

			mandatoryTableArgument(data, "color", "table")
			verify(#data.color >= 2, "Grouping '"..data.grouping.."' requires at least two colors, got "..#data.color..".")
		end,
		quantil = function() -- equal to 'equalsteps'
			verifyUnnecessaryArguments(data, {"target", "select", "color", "grouping", "min", "max", "slices", "invert", "grid"})

			mandatoryTableArgument(data, "select", "string")
			mandatoryTableArgument(data, "target", "CellularSpace")

			local sample = data.target.cells[1][data.select]

			verify(sample ~= nil, "Selected element '"..data.select.."' does not belong to the target.")
			if not belong(type(sample), {"number", "function"}) then
				customError("Selected element should be number or function, got "..type(sample)..".")
			end

			if data.min == nil or data.max == nil then
				local min = math.huge
				local max = -math.huge

				forEachCell(data.target, function(cell)
					local mdata = cell[data.select]
					if min > mdata then
						min = mdata
					elseif max < mdata then
						max = mdata
					end
				end)

				if data.min == nil then data.min = min end
				if data.max == nil then data.max = max end
			end

			mandatoryTableArgument(data, "slices", "number")
			mandatoryTableArgument(data, "min", "number")
			mandatoryTableArgument(data, "max", "number")
			defaultTableValue(data, "invert", false)

			verify(data.min < data.max, "Argument 'min' ("..data.min..") should be less than 'max' ("..data.max..").")
			verify(data.slices > 1, "Argument 'slices' ("..data.slices..") should be greater than one.")

			if type(data.color) == "string" then
				local mcolors = brewerMatchNames[data.color]

				if not mcolors then
					local s = suggestion(data.color, brewerMatchNames)
					if s then
						customError(switchInvalidArgumentSuggestionMsg(data.color, "color", s))
					else
						customError("Invalid color '"..data.color.."'.")
					end
				end

				mcolors = brewerRGB[mcolors][data.slices]

				if not mcolors then
					customError("Color '"..data.color.."' does not support "..data.slices.." slices.")
				end

				if data.invert then
					local invcolors = {}
					for i = #mcolors, 1, -1 do
						table.insert(invcolors, mcolors[i])
					end

					data.color = invcolors
				else
					data.color = mcolors
				end
			end

			mandatoryTableArgument(data, "color", "table")
			verify(#data.color >= 2, "Grouping '"..data.grouping.."' requires at least two colors, got "..#data.color..".")
		end,
		uniquevalue = function()
			mandatoryTableArgument(data, "select", "string")
			mandatoryTableArgument(data, "value", "table")
			optionalTableArgument(data, "label", "table")

			local attrs

			if type(data.target) == "CellularSpace" then
				attrs = {"target", "select", "value", "label", "color", "grouping", "grid"}

				local sample = data.target.cells[1][data.select]

				verify(sample ~= nil, "Selected element '"..data.select.."' does not belong to the target.")
				if not belong(type(sample), {"string", "number", "function"}) then
					customError("Selected element should be string, number, or function, got "..type(sample)..".")
				end
			else -- Society
				attrs = {"target", "select", "value", "label", "color", "grouping", "background", "size", "font", "symbol", "grid"}
			end

			if type(data.color) == "string" then
				local mcolors = brewerMatchNames[data.color]

				if not mcolors then
					local s = suggestion(data.color, brewerMatchNames)
					if s then
						customError(switchInvalidArgumentSuggestionMsg(data.color, "color", s))
					else
						customError("Invalid color '"..data.color.."'.")
					end
				end

				mcolors = brewerRGB[mcolors][#data.value]
				if not mcolors then
					customError("Color '"..data.color.."' does not support "..#data.value.." slices.")
				end

				data.color = mcolors
			end

			mandatoryTableArgument(data, "color", "table")

			verify(#data.color == #data.value, "There should exist colors for each value. Got "..#data.color.." colors and "..#data.value.." values.")

			if data.value ~= nil then
				local theType = type(data.value[1])
				forEachElement(data.value, function(_, value, mtype)
					verify(mtype == theType, "All values should have the same type, got "..theType.." and "..mtype..".")

					local count = 0
					forEachElement(data.value, function(_, mvalue)
						if value == mvalue then
							count = count + 1
						end
					end)
					verify(count == 1, "There should not exist repeated elements in 'value'.")
				end)
			end

			if data.label == nil then
				data.label = {}

				for i = 1, #data.value do
					data.label[i] = _Gtme.stringToLabel(data.value[i])
				end
			end
			verify(#data.label == #data.value, "There should exist labels for each value. Got "..#data.label.." labels and "..#data.value.." values.")

			verifyUnnecessaryArguments(data, attrs)
		end,
		placement = function()
			mandatoryTableArgument(data, "target", "CellularSpace")

			-- we need to verify the target before unnecessary arguments because if
			-- target is Society then new attributes were added
			verifyUnnecessaryArguments(data, {"target", "color", "grouping", "min", "max", "slices", "value", "grid"})

			if data.grid == false then data.grid = nil end

			forEachCell(data.target, function(cell)
				cell.quantity_ = function(self) return #self:getAgents() end
			end)
		end,
		none = function()
			local mblack = {0, 0, 0}
			local mwhite = {255, 255, 255}

			if not data.color then
				if type(data.target) == "CellularSpace" then
					data.color = {mwhite}
				else -- Society
					data.color = {mblack}
				end
			end

			if type(data.color) == "string" then
				customError("Grouping 'none' cannot use ColorBrewer.")
			end

			mandatoryTableArgument(data, "color", "table")
			verify(#data.color == 1, "Grouping 'none' requires only one color, got "..#data.color..".")

			data.grouping = "uniquevalue"

			if type(data.target) == "CellularSpace" then
				verifyUnnecessaryArguments(data, {"target", "color", "grouping", "grid"})

				data.select = "background_"
				data.value = {0, 1}
				data.label = {"Cell", "<none>"}

				if data.color[1][1] == 0 and data.color[1][2] == 0 and data.color[1][3] == 0 then
					data.color = {mblack, mwhite}
				else
					data.color = {data.color[1], mblack}
				end
		
				forEachCell(data.target, function(cell)
					cell.background_ = 0
				end)
			else -- Society
				verifyUnnecessaryArguments(data, {"target", "color", "grouping", "background", "size", "font", "symbol", "grid"})

				data.select = "state_"
				data.value = {"alive", "dead"}
				data.label = {"Agent", "<none>"}

				if data.color[1][1] == 255 and data.color[1][2] == 255 and data.color[1][3] == 255 then
					data.color = {mwhite, mblack}
				else
					data.color = {data.color[1], mwhite}
				end

				forEachAgent(data.target, function(ag)
					ag.state_ = "alive"
				end)
			end
		end
	}

	if data.grouping == "placement" then
		return Map{
			target = data.target,
			select = "quantity_",
			min = data.min,
			max = data.max,
			grid = data.grid,
			slices = data.slices,
			color = data.color,
			value = data.value
		}
	end

	if type(data.target) == "CellularSpace" then
		local sample = data.target.cells[1][data.select]

		if type(sample) == "function" then
			if data.target.cellobsattrs_ == nil then
				data.target.cellobsattrs_ = {}
			end

			data.target.cellobsattrs_[data.select] = true

			forEachCell(data.target, function(cell)
				cell[data.select.."_"] = cell[data.select](cell)
			end)
			data.select = data.select.."_"
		end
	end

	-- TODO: select with more than one attribute
	--if type(data.select) == "string" then data.select = {data.select} end
	--optionalTableArgument(data, "select", "table")
	--verify(#data.select > 0, "Maps must select at least one attribute.")

	--forEachElement(data.select, function(_, value)
	--	verify(data.target.cells[1][value] ~= nil, "Selected element '"..value.."' does not belong to the subject.")
	--end)

	local observerType = 6

	local observerParams = {}
	local colorBar = {}

	switch(data, "grouping"):caseof{
		equalsteps = function()
			local step = (data.max - data.min) / (#data.color - 1)

			for i = 1, #data.color do
				table.insert(colorBar, {value = data.min + step * (i - 1), color = data.color[i]})
			end
		end,
		quantil = function()
			local step = (data.max - data.min) / (#data.color - 1)

			for i = 1, #data.color do
				table.insert(colorBar, {value = data.min + step * (i - 1), color = data.color[i]})
			end
		end,
		uniquevalue = function()
			for i = 1, #data.value do
				table.insert(colorBar, {value = data.value[i],
				                        color = data.color[i],
				                        label = data.label[i]})
			end
		end
	}

	local legend = _Gtme.Legend{
		grouping = data.grouping,
		colorBar = colorBar,
		slices = data.slices,
		font = data.font,
		fontSize = data.size,
		symbol = data.symbol,
		size = 1,
		pen = 2,
	}

	if type(data.target) == "Society" then
		table.insert(observerParams, data.background.target)
		table.insert(observerParams, data.background.id)
	end

	table.insert(observerParams, legend)

	local idObs, obs

	if type(data.target) == "Society" then
		forEachAgent(data.target, function(ag)
			verify(ag.cObj_, "It is simple agent and it can not be observable.")
			ag.cObj_:createObserver(observerType, {data.select}, observerParams)
		end)
		data.target.observerdata_ = {observerType, {data.select}, observerParams}
		data.background.target:notify()
		data.background.target:notify()
		return data.background
	else
		local tbDimensions = {data.target.yMax - data.target.yMin + 1, data.target.xMax - data.target.xMin + 1}
		idObs, obs = data.target.cObj_:createObserver(observerType, tbDimensions, {data.select}, observerParams, data.target.cells)
	end

	local map = TeMap()
	map:setObserver(obs)

	data.id = idObs
	data.cObj_ = map

	if data.grid then
		map:setGridVisible(1)
	end

	setmetatable(data, metaTableMap_)
	table.insert(_Gtme.createdObservers, data)

	-- TODO: change the lines below by data:notify()
	data.target:notify()
	data.target:notify()

	return data
end

